---
title: "Exploration and statistical analyses of Haemosporidian infection status (1/0) across vireos"
author: Dani Wiley
date:   last-modified
editor: visual
description: |
  Explores the data, summarizing singular relationships between independent and dependent variables and running simple hypothesis tests to understand patterns in the data. Contact dlfwiley@gmail.com with any questions or requests for more data.
format:
  html:
    theme:            litera
    highlight-style:  atom-one
    page-layout:      full      # article, full   # https://quarto.org/docs/output-formats/page-layout.html
    toc: true        # Enable the table of contents
    toc-title: "Contents"  # Optional: Set a custom title for the TOC
    toc-depth: 1     # Optional: Specify the heading levels to include
    toc-location: body # Optional: Show the TOC on the left (other options are "right" or "float")
    number-sections:  false
    self-contained:         false     # !!! this can cause a render error
    code-overflow:          scroll    # scroll, wrap
    code-block-bg:          true
    code-block-border-left: "#30B0E0"
    code-copy:              false     # true, false, hover a copy buttom in top-right of code block
editor_options:  
  chunk_output_type: console
---

Code last updated: 7/17/2025

# Load libraries

```{r}
library(dplyr)
library(car)
library(stats)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(effectsize)
library(erikmisc)
library(rcompanion)
library(binom)
library(performance)
library(boot)
library(MuMIn)
library(patchwork)
library(ggeasy)
library(ggfortify)
library(AICcmodavg)
library(GGally)
library(caret)
library(ResourceSelection)
```

# Load prevalence data

Code last updated 6/23/2025

```{r}
# As of 20 June, 2025, these data sets are final. This version includes all 19 BioClim variables and 1 elevation variable.

#Infection prevalence data sets:---------------------------------------------------

setwd("/Users/danie/Desktop/BarrowLab/Projects/VireoMalaria/FigShare/")
#Haemoproteous prevalence data set:
df <- read.csv("Host_Sample_Dataset.csv")
df <- filter(df, !is.na(df$Haem_01))

#CLASSIFICATION OF VARIABLES ------------------------
#Making sure our variables are correctly classified.
df$common_name       <- as.factor(df$common_name)
df$county            <- as.factor(df$county)
df$coll_date         <- as.factor(df$Haem_01)
df$coll_year         <- as.factor(df$coll_year)
df$tissue_type       <- as.factor(df$tissue_type)
df$Haem_01           <- as.factor(df$Haem_01)
df$Plas_01           <- as.factor(df$Plas_01)
df$coinfection_01    <- as.factor(df$coinfection_01)

#CREATION OF TISSUE TYPES DATAFRAMES FOR COMPARISON -----------------------------------------------

Hp_musc_tiss <- subset(df
                       , df$tissue_type == "pectoral muscle")
Hp_blood_tiss <- subset(df
                       , df$tissue_type == "whole blood")

#MUTATION OF SPECIES DATAFRAMES FOR ANALYSIS--------------------------------------
#To compare species infection status, we need to create dataframes that include only species with at least 1 positive case.
#Br---------------------------------------------------------------------
table(df$common_name, df$Haem_01)
  #                   0   1
  # Bell's vireo      9  11
  # gray vireo       55 115
  # plumbeous vireo   9  49
```

## -----------------------------------------------

## PT 1 START:

Note about effect size for binomial response: Effect size with contingency tables larger than 2x2 will be calculated with CramerV function (e.g. ANOVA, MW-U), whereas 2x2 contingency tables will be calculated by phi function (for chi-squared).

# Species v infection status

## All vireos: Significant χ2 (p-value = 0.015, w = 0.185)

```{r}
# Hypothesis (null): Observed and expected infection status counts do not differ across species.
# Run chi-square test with the above calculated contingency table 
##Hp-----------------------------------------
Hp.Sp.chi <- chisq.test(table(df$common_name, df$Haem_01))
Hp.Sp.chi
# 	Pearson's Chi-squared test
# 
# data:  table(df$common_name, df$Haem_01)
# X-squared = 8.4385, df = 2, p-value = 0.01471

##Hp-----------------------------------------
Sp.Hp.table <- chisq.test(table(df$common_name, df$Haem_01))$expected 
Sp.Hp.table
  #                         0         1
  # Bell's vireo     5.887097  14.11290  
  # gray vireo      50.040323 119.95968
  # plumbeous vireo 17.072581  40.92742

#save p-value for figure
HpSp_pearsons.p <- Hp.Sp.chi$p.value

#calculate effect size
#Cramer's V is used when calculating the effect size of a 3x2 contingency table. More info, including how to interpret effect size based on degrees of freedom:
 
HpSp_effsize.s <- cramerV(df$common_name, df$Haem_01)
HpSp_pearsons.p
# 0.0147095
HpSp_effsize.s
# Cramer V 
#   0.1845
```

## BEVI v PLVI: Significant with medium effect size χ2 (p-value = 0.017, w = 0.306 )

```{r}
#--------
#Let's check the relationships between groups.
#p-value for 95% significance with three comparisons (Bonferonni correction) is 0.05/3 = 0.01666667, or 0.017)

#Prep data:
df$common_name <- as.character(df$common_name)
BEVI_GRVI_chi.df <- df[-(which(df$common_name %in% "plumbeous vireo")),] #190
BEVI_PLVI_chi.df <- df[-(which(df$common_name %in% "gray vireo")),] #78
GRVI_PLVI_chi.df <- df[-(which(df$common_name %in% "Bell's vireo")),] #228
df$common_name <- as.factor(df$common_name)

#-----------
#BEVI vs GRVI
Hp.BEVI_GRVI.chi <- chisq.test(table(BEVI_GRVI_chi.df$common_name, BEVI_GRVI_chi.df$Haem_01))
Hp.BEVI_GRVI.chi
# 	Pearson's Chi-squared test with Yates' continuity correction
# 
# data:  table(BEVI_GRVI_chi.df$common_name, BEVI_GRVI_chi.df$Haem_01)
# X-squared = 0.7777, df = 1, p-value = 0.3778
#NOT A SIGNIFICANT DIFFERENCE IN OBSERVED VS EXPECTED INFECTION COUNTS B/W BEVI & GRVI

#-----------
#BEVI vs PLVI
Hp.BEVI_PLVI.chi <- chisq.test(table(BEVI_PLVI_chi.df$common_name, BEVI_PLVI_chi.df$Haem_01))
Hp.BEVI_PLVI.chi
# 	Pearson's Chi-squared test with Yates' continuity correction
# 
# data:  table(BEVI_PLVI_chi.df$common_name, BEVI_PLVI_chi.df$Haem_01)
# X-squared = 5.7161, df = 1, p-value = 0.01681
#A SIGNIFICANT DIFFERENCE IN OBSERVED VS EXPECTED INFECTION COUNTS B/W BEVI & PLVI

Hp.BEVI_PLVI_table <- table(BEVI_PLVI_chi.df$common_name, BEVI_PLVI_chi.df$Haem_01)

BEVI_PLVI_effectsize.s <- phi(Hp.BEVI_PLVI_table)
BEVI_PLVI_effectsize.s
#   phi 
# 0.306 
#-----------
#GRVI vs PLVI
Hp.GRVI_PLVI.chi <- chisq.test(table(GRVI_PLVI_chi.df$common_name, GRVI_PLVI_chi.df$Haem_01))
Hp.GRVI_PLVI.chi
# 	Pearson's Chi-squared test with Yates' continuity correction
# 
# data:  table(GRVI_PLVI_chi.df$common_name, GRVI_PLVI_chi.df$Haem_01)
# X-squared = 5.2657, df = 1, p-value = 0.02175
#NOT A SIGNIFICANT DIFFERENCE IN OBSERVED VS EXPECTED INFECTION COUNTS B/W GRVI & PLVI

```

```{r fig.width = 5, fig.height= 8}
library(corrplot)
#Pearson's residuals of Chi-squared test
Hp.sp.corr <- "Pearsons residual scores for Hp by Species"
corrplot(Hp.Sp.chi$residuals, 
         title = Hp.sp.corr,
         is.cor = FALSE)

#Comparing frequency of two groups between two categorical variables --- the Chi-square test of independence works by comparing the observed frequencies to the expected frequencies. Testing relationship between two variables.

#Positive residuals are in blue. Positive values in cells specify an attraction (positive association) between the corresponding row and column variables. Negative residuals are in red. This implies a repulsion (negative association) between the corresponding row and column variables.
```

Bell's and gray vireos have more uninfected than expected, while plumbeous has more infected than expected.

## Binomial confidence intervals

Explore binomial confidence intervals using {binom}, similar to Mario Alvarado‑Rybak et al., 2021.

We estimated 95% binomial confidence interval (95% CI) with a logistic (logit) parameterization for each category using the binom.confint function (R package ‘binom’).

```{r}
library(binom)
#Uses exact method to obtain a confidence interval on the binomial probability.
#x = number of infected in specific species
#n = number of trails (total) in specific species
#ALL VIREOS, BY NUMBER OF BIRDS INFECTED TOTAL--------
Hp_bybird_x <- 175
Hp_bybird_n <- 248
Hp_bybird_bc <- binom.confint(
  Hp_bybird_x, Hp_bybird_n, conf.level = 0.95, methods = "exact")
Hp_bybird_bc 
#   method   x   n      mean     lower     upper
# 1  exact 175 248 0.7056452 0.6446804 0.7616177
#SINGLE INFECTIONS, BY NUMBER OF BIRDS INFECTED TOTAL--------
table(df$coinfection_01)
Hp_single_x <- 155
Hp_single_n <- 176
Hp_single_bc <- binom.confint(
  Hp_single_x, Hp_single_n, conf.level = 0.95, methods = "exact")
Hp_single_bc 
#   method   x   n      mean    lower     upper
# 1  exact 155 176 0.8806818 0.8234071 0.924601
#COINFECTIONS, BY NUMBER OF BIRDS INFECTED TOTAL--------
Hp_coinfect_x <- 21
Hp_coinfect_n <- 176
Hp_coinfect_bc <- binom.confint(
  Hp_coinfect_x, Hp_coinfect_n, conf.level = 0.95, methods = "exact")
Hp_coinfect_bc 
#   method  x   n mean      lower     upper
# 1  exact 21 176 0.1193182 0.07539834 0.1765929
#BEVI--------------
Bell_hp_x <- 11
Bell_hp_n <- 20
Bell_hp_bc <- binom.confint(
  Bell_hp_x, Bell_hp_n, conf.level = 0.95, methods = "exact")
Bell_hp_bc 
#   method  x  n mean     lower     upper
# 1  exact 11 20 0.55 0.3152781 0.7694221
#Creating error bars for figure
Bell_up  <- Bell_hp_bc$upper
Bell_low <- Bell_hp_bc$lower

#GRVI--------------
Gray_hp_x <- 115
Gray_hp_n <- 170
Gray_hp_bc <- binom.confint(
  Gray_hp_x, Gray_hp_n, conf.level = 0.95, methods = "exact")
Gray_hp_bc 
#   method   x   n      mean     lower     upper
# 1  exact 115 170 0.6764706 0.6005757 0.7460858
#Creating error bars for figure
Gray_up  <- Gray_hp_bc$upper
Gray_low <- Gray_hp_bc$lower

#PLVI-------------
Plum_hp_x <- 49
Plum_hp_n <- 58
Plum_hp_bc <- binom.confint(
  Plum_hp_x, Plum_hp_n, conf.level = 0.95, methods = "exact")
Plum_hp_bc
#   method  x  n      mean     lower     upper
# 1  exact 49 58 0.8448276 0.7257685 0.9265067
#Creating error bars for figure
Plum_up  <- Plum_hp_bc$upper
Plum_low <- Plum_hp_bc$lower
```

## Visualization

Figure 1 Panel b

```{r}
# Box Plot: ALL infected/uninfected 
#Prep work:
error_c <- c("#F9F0CA","#F3DA44","black","#D8D8D6","#A0A0A0","#D7EDF9","#89B8EB", "black" ) #When geom_errorbar is added, we need 2 more colors (8 required), but they don't show up on the actual barplot.
Spp_c <- c("#F9F0CA","#F3DA44","#D8D8D6","#A0A0A0","#D7EDF9","#89B8EB") #original color scale for Spp
#color palette for plot
#df$Haem_01 <- forcats::fct_relevel(df$Haem_01, "1","0") #flips x-axis factor levels so infected points are plotted first
df$Species_Status <- paste(df$common_name, df$Haem_01, sep = "_")
#Create dataframe with proportions so we can plot the binomial confidence intervals as error bars
df_proportions <- df %>%
  group_by(common_name) %>%
  summarize(
    InfectedCount = sum(Haem_01 == "1"),
    TotalCount = n(),
    Proportion = InfectedCount / TotalCount,  # Proportion of infected
    .groups = 'drop'  # Drop grouping column for clean data frame
  )
df_proportions
table(df$Species_Status)

df_ci <- data.frame(
  Species_Status = c("Bells vireo_1", 
                     "gray vireo_1", 
                     "plumbeous vireo_1"),
  common_name = c("Bell's vireo", "gray vireo", "plumbeous vireo"),
  Haem_01 = c("1", "1", "1"),
  Proportion = c(0.55, 0.676, 0.845),
  Lower_CI = c(Bell_up, Gray_up, Plum_up),
  Upper_CI = c(Bell_low, Gray_low, Plum_low)
)

#Plot:
# Create a proportion bar chart
Hp_Spp_bar <- ggplot(df, 
                     aes(x = as.factor(common_name), fill = Species_Status)) +
  geom_bar(position = "fill", color='black',width=0.9) + 
  scale_y_continuous(labels = scales::percent) +  # Convert y-axis to percentages
  geom_errorbar(data = df_ci,
                aes(x = common_name, 
                    ymax = c(Bell_up, Gray_up, Plum_up), 
                    ymin = c(Bell_low, Gray_low, Plum_low), 
                width = 0.2)) +
  scale_fill_manual(values = error_c) + # Apply custom colors
  labs(x = "",y = "Proportion", fill = "Infection Status",
    title = "Proportion of infected vs. uninfected vireos by species") +
  theme_minimal() +
  theme(plot.title.position = "plot", # parameter "plot" makes "title" flush with y-axis
        plot.title = element_text(face="bold")) + 
  theme(legend.position = "blank") +
  theme(axis.text.y=element_text(size=14), axis.text.x=element_text(size=14), 
  axis.title=element_text(size=16)) + # This makes panel header bold 
  # theme(axis.text.x = element_text(angle = 45, hjust = 1)  # Adjust x-axis text for readability
  # ) + 
  annotate("text", x = Inf, y = Inf, 
                label = paste0(
                  "p = ", signif(HpSp_pearsons.p, 2), 
                  " r = ", signif(HpSp_effsize.s, 2)), 
                hjust = 1.3, vjust = 1.0, size = 4.0, color = "black", fontface = "italic")# Add p-value annotation
plot(Hp_Spp_bar)
# ggsave(Hp_Spp_bar, filename="FigS1_AllSpp_Barplots_Spp_20241224.pdf", bg="transparent", height=4.5, width=6, units="in")
```

## -----------------------------------------------

# Tissue type v pathogen status

# Tissue Type: Not Significant χ2 (p-value = 0.095, w = 0.10)

```{r}
# Hypothesis (null): Observed and expected infection status counts do not differ across tissue types.

#Steps to running chi-square in R: 
# Begin by making a contingency table, assign to a variable for easier manipulation

#Hp-----------------------------------------
tiss.Hp.table <- table(df$tissue_type, df$Haem_01)
tiss.Hp.table
  #                   0   1
  # pectoral muscle  18  64
  # whole blood      55 111

# Run chi-square test with the above calculated contingency table 
Hp.tiss.chi <- chisq.test(tiss.Hp.table)
Hp.tiss.chi
#Pectoral muscle v. whole blood
# 	Pearson's Chi-squared test with Yates' continuity correction
# 
# data:  tiss.Hp.table
# X-squared = 2.7873, df = 1, p-value = 0.09501
TissHp_effectsize.s <- phi(tiss.Hp.table)
TissHp_effectsize.s
   # phi 
# 0.10
```

```{r fig.width = 5, fig.height= 5}
#Hp-----------------------------------------------
#Pearson's residuals of Chi-squared test
library(corrplot)
Hp.tiss.corr <- "Pearson's Residual Score"
corrplot(Hp.tiss.chi$residuals, 
         title = Hp.tiss.corr,
         is.cor = FALSE)
```

A trend that whole blood has more Hp negative samples, but the p value is not significant.

# -----------------------------------------------

# Univariate hypothesis tests for environmental variables

# -----------------------------------------------

## Latitude v Status

### All vireos: Significant; MW-U (p-value = 0.002; r= 0.201)

### BEVI: Significant; MW-U (p-value = 0.040; r = 0.467)

### GRVI: NOT significant; MW-U (p-value = 0.086; r = 0.132)

### PLVI: NOT significant; MW-U (p-value = 0.119; r = 0.206)

All vireos:

```{r}
#Data prep:
df_p_pos <- filter(df, df$Haem_01 =="1") #175
df_p_neg <- filter(df, df$Haem_01 =="0") #73

shapiro.test(df_p_pos$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_pos$analysis_lat
# W = 0.77655, p-value = 4.639e-15
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$analysis_lat
# W = 0.72043, p-value = 1.728e-10
# FAILED - NOT NORMAL; USE MW-U

qqPlot(df$analysis_lat)
# not normally distributed

# Wilcoxon Rank-Sum Test if data are not normal
HpLat_wilcox.prev <- wilcox.test(analysis_lat ~ Haem_01, data = df, exact = FALSE)
HpLat_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 4758, p-value = 0.001552
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpLat_wilcox.prev.p <-HpLat_wilcox.prev$p.value

#Calculate effect size
HpLat_effsize <- wilcox_effsize(df, analysis_lat ~ Haem_01, alternative = "two.sided")
print(HpLat_effsize)
#save effect size
# A tibble: 1 × 7
#   .y.          group1 group2 effsize    n1    n2 magnitude
# * <chr>        <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_lat 0      1        0.201    73   175 small    
HpLat_effsize.s <- HpLat_effsize$effsize
# stats
HpLat_wilcox.prev.p
# [1] 0.001551887
HpLat_effsize.s
# 0.2010268
#--------------------------------------------------------
#WITHOUT GRVI UTAH SAMPLES (11/11 INFECTED) at 38 latitude
df1 <- filter(df, df$state != "Utah") #237
df_p_pos1 <- filter(df_p_pos, df_p_pos$state != "Utah") #164
df_p_neg1 <- filter(df_p_neg, df_p_neg$state != "Utah") #73

shapiro.test(df_p_pos1$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_pos1$analysis_lat
# W = 0.8206, p-value = 6.461e-13
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg1$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg1$analysis_lat
# W = 0.72043, p-value = 1.728e-10
# FAILED - NOT NORMAL; USE MW-U

# Wilcoxon Rank-Sum Test if data are not normal
HpLat_wilcox.prev1 <- wilcox.test(analysis_lat ~ Haem_01, data = df1, exact = FALSE)
HpLat_wilcox.prev1
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 4758, p-value = 0.01175
# alternative hypothesis: true location shift is not equal to 0 
# SIGNIFICANT DIFFERENCE

#save p-value for plots
HpLat_wilcox.prev.p <-HpLat_wilcox.prev$p.value

#Calculate effect size
HpLat_effsize1 <- wilcox_effsize(df, analysis_lat ~ Haem_01, alternative = "two.sided")
print(HpLat_effsize1)
# # A tibble: 1 × 7
#   .y.          group1 group2 effsize    n1    n2 magnitude
# * <chr>        <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_lat 0      1        0.201    73   175 small 
#save effect size
HpLat_effsize1.s <- HpLat_effsize1$effsize
```

BEVI :

```{r}
#Data prep:
Bells_p_hp <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1") #11
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0") #9

shapiro.test(Bells_Hp_pos$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$analysis_lat
# W = 0.71697, p-value = 0.0007741
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Bells_Hp_neg$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$analysis_lat
# W = 0.75864, p-value = 0.006827
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$analysis_lat)
# Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
BellsLat_wilcox.prev <- wilcox.test(analysis_lat ~ Haem_01, data = Bells_p_hp, exact = FALSE) 
BellsLat_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 77, p-value = 0.04024
# alternative hypothesis: true location shift is not equal to 0
# SIGNIFICANT DIFFERENCE

#save p-value for plots
BellsLat_wilcox.prev.p <- BellsLat_wilcox.prev$p.value

#Calculate effect size
BellsLat_effsize <- wilcox_effsize(Bells_p_hp, analysis_lat ~ Haem_01, alternative = "two.sided")
print(BellsLat_effsize)
# # A tibble: 1 × 7
#   .y.          group1 group2 effsize    n1    n2 magnitude
# * <chr>        <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_lat 0      1        0.467     9    11 moderate 
BellsLat_effsize.s <- BellsLat_effsize$effsize

BellsLat_wilcox.prev.p
# [1] 0.04023868
BellsLat_effsize.s
# Effect size (r) 
#       0.4671766
wilcoxonZ(Bells_Hp_pos$analysis_lat, Bells_Hp_neg$analysis_lat)
#     z 
# -2.09
```

GRVI:

```{r}
# Null hypothesis: There is no significant difference in the mean latitude between infection status and latitude.
#TEST FOR EQUAL VARIANCES BETWEEN INFECTED VS. UNINFECTED LATITUDE VALUES.

#Prep data:
Gray_p_hp <- subset(df, df$common_name == "gray vireo") 
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1") #115
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0") #55

shapiro.test(Gray_p_hp$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_p_hp$analysis_lat
# W = 0.30845, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_p_hp$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_p_hp$analysis_lat
# W = 0.30845, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$analysis_lat)
#Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
GrayLat_wilcox.prev <- wilcox.test(analysis_lat ~ Haem_01, data = Gray_p_hp, exact = FALSE) 
GrayLat_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 2646.5, p-value = 0.08571
# alternative hypothesis: true location shift is not equal to 0
# NOT SIGNIFICANT

#save p-value for plots
GrayLat_wilcox.prev.p <- GrayLat_wilcox.prev$p.value

#Calculate effect size
GrayLat_effsize <- wilcox_effsize(Gray_p_hp, analysis_lat ~ Haem_01, alternative = "two.sided")
print(GrayLat_effsize)
# # A tibble: 1 × 7
#   .y.          group1 group2 effsize    n1    n2 magnitude
# * <chr>        <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_lat 0      1        0.132    55   115 small 
GrayLat_effsize.s <- GrayLat_effsize$effsize

GrayLat_wilcox.prev.p
# [1] 0.08570774
GrayLat_effsize.s
# Effect size (r) 
#       0.1319298
wilcoxonZ(Gray_Hp_pos$analysis_lat, Gray_Hp_neg$analysis_lat)
#    z 
# 1.72 

# NOT INCLUDING UTAH OUTLIERS:
#Prep data:
Gray_p_hp1 <- subset(Gray_p_hp, Gray_p_hp$state != "Utah") # remove outliers in Utah
Gray_Hp_pos1 <- filter(Gray_p_hp1, Gray_p_hp1$Haem_01 == "1") #104
Gray_Hp_neg1 <- filter(Gray_p_hp1, Gray_p_hp1$Haem_01 == "0") #55

shapiro.test(Gray_p_hp1$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_p_hp1$analysis_lat
# W = 0.81289, p-value = 5.44e-13
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_p_hp1$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_p_hp1$analysis_lat
# W = 0.81289, p-value = 5.44e-13
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp1$analysis_lat)
#Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
GrayLat_wilcox.prev1 <- wilcox.test(analysis_lat ~ Haem_01, data = Gray_p_hp1, exact = FALSE) 
GrayLat_wilcox.prev1
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 2646.5, p-value = 0.4402
# alternative hypothesis: true location shift is not equal to 0
# NOT SIGNIFICANT
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") #49
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") #9

shapiro.test(Plum_Hp_pos$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$analysis_lat
# W = 0.91806, p-value = 0.002258
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$analysis_lat
# W = 0.94288, p-value = 0.6125
# PASSED - NORMAL; T-TEST can be used

#Let's check the overall data pattern though:
shapiro.test(Plum_p_hp$analysis_lat)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_p_hp$analysis_lat
# W = 0.93383, p-value = 0.003514
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Plum_p_hp$analysis_lat)
#Almost normally distributed, but not quite.

# Wilcoxon Rank-Sum Test if data are not normal
PlumLat_wilcox.prev <- wilcox.test(analysis_lat ~ Haem_01, data = Plum_p_hp, exact = FALSE) 
PlumLat_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_lat by Haem_01
# W = 147.5, p-value = 0.1194
# alternative hypothesis: true location shift is not equal to 0
# NOT SIGNIFICANT

#save p-value for plots
PlumLat_wilcox.prev.p <- PlumLat_wilcox.prev$p.value
#Calculate effect size
Plum_effsize <- wilcox_effsize(Plum_p_hp, analysis_lat ~ Haem_01, alternative = "two.sided")
print(Plum_effsize)
# # A tibble: 1 × 7
#   .y.          group1 group2 effsize    n1    n2 magnitude
# * <chr>        <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_lat 0      1        0.206     9    49 small  
Plum_effsize.s <- Plum_effsize$effsize

PlumLat_wilcox.prev.p
# [1] 0.1194409
Plum_effsize$effsize
# Effect size (r) 
#       0.2058706 
wilcoxonZ(Plum_Hp_pos$analysis_lat, Plum_Hp_neg$analysis_lat)
#    z 
# 1.57 
```

# Visualization

Color-palette

```{r}
#Visualize dataset
#Set colors for pathogen comparisons
Hp_c <- c("#C5D8CF", "#4F6D5A")
BEVI_c <- c("#F9F0CA","#F3DA44")
GRVI_c <-c("#D8D8D6","#A0A0A0")
PLVI_c <-c("#D7EDF9","#89B8EB")
```

Species-specific box plots

```{r}
custom_fill_colors <- c(
  "Bell's vireo.0" = BEVI_c[1],
  "Bell's vireo.1" = BEVI_c[2],
  "gray vireo.0"   = GRVI_c[1],
  "gray vireo.1"   = GRVI_c[2],
  "plumbeous vireo.0" = PLVI_c[1],
  "plumbeous vireo.1" = PLVI_c[2]
)

df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
species_lat_prev_facet <- ggplot(
  df, aes(x = Haem_01, y = analysis_lat, fill = interaction(common_name, Haem_01))) +
  geom_boxplot(
    width = 0.8,  # wider boxes
    size = 0.8,
    outlier.shape = NA,
    position = position_dodge(width = 3)) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
    ) +
  scale_fill_manual(values = custom_fill_colors, guide = "none") +
  scale_x_discrete(
    labels = c("pos", "neg")) +
  scale_y_continuous(limits = c(32, 38.5)) +
  facet_wrap(~common_name, ncol = 3) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_blank(),
    strip.text = element_text(size = 13),
    strip.background = element_blank(),     # Removes gray strip box
    panel.spacing.x = unit(1, "lines"),     # Adjust inter-facet spacing
    panel.border = element_blank(),         # Removes facet boxes
    legend.position = "none") +
  labs(y = "Latitude")
species_lat_prev_facet
```

Overall box plots:

```{r}
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))  # Add again if reloaded/changed
overall_lat_prev_plot <- ggplot(
  df, aes(x = Haem_01, y = analysis_lat, fill = Haem_01)) +
  geom_boxplot(
    width = 0.8,
    size = 0.8,
    outlier.shape = NA
  ) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
  ) +
  scale_fill_manual(values = c("0" = "#C5D8CF", "1" = "#4F6D5A"), guide = "none") +  # overall palette
  scale_x_discrete(
    labels = c("pos", "neg")
  ) +
  scale_y_continuous(limits = c(32, 38.5)) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.x = element_blank(),         # remove x-axis labels here
    axis.ticks.x = element_blank(),        # and tick marks
    panel.border = element_blank(),
    legend.position = "none") +
  labs(title = "Infection status across latitudes")
overall_lat_prev_plot
```

Figure S2 - latitude v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
final_combined_plot <- overall_lat_prev_plot / species_lat_prev_facet +
  plot_layout(heights = c(1, 1))
final_combined_plot

ggsave(final_combined_plot, filename="FigS2_box.pdf", bg="transparent", height=10, width=10, units="in")
```

# ----------------------------------------------

# Elevation v Status

## All vireos: NOT signficant; MW-U (p-value = 0.286, r = 0.068)

## BEVI: NOT significantt; MW-U (p-value = 0.148, r = 0.332)

## GRVI: Significant; MW-U (p-value = 0.038, r = 0.159) (but driven by UT samples)

## PLVI: NOT significantly; MW-U (p-value = 0.772, r = 0.039)

All vireos:

```{r}
#Prep data:
df_p_pos <- filter(df, df$Haem_01 == "1")
df_p_neg <- filter(df, df$Haem_01 == "0")

shapiro.test(df_p_pos$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_pos$analysis_elev
# W = 0.90433, p-value = 3.119e-09
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$analysis_elev
# W = 0.79334, p-value = 9.656e-09
# FAILED - NOT NORMAL; USE MW-U

plotNormalHistogram(df$analysis_elev) #NORMAL ENOUGH DISTRIBUTION
qqPlot(df$analysis_elev) #Fat tails, not within range

# Wilcoxon Rank-Sum Test if data are not normal
HpElev_wilcox.prev <- wilcox.test(analysis_elev ~ Haem_01, data = df, exact = FALSE)
HpElev_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_elev by Haem_01
# W = 5838, p-value = 0.286
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpElev_wilcox.prev.p <-HpElev_wilcox.prev$p.value

#Calculate effect size
HpElev_effsize <- wilcox_effsize(df, analysis_elev ~ Haem_01, alternative = "two.sided")
print(HpElev_effsize)
# # A tibble: 1 × 7
#   .y.           group1 group2 effsize    n1    n2 magnitude
# * <chr>         <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_elev 0      1       0.0678    73   175 small    
HpElev_effsize.s <- HpElev_effsize$effsize
# stats
HpElev_wilcox.prev.p
# [1] 0.2860463
HpElev_effsize.s
# Effect size (r) 
#      0.06780579 
```

BEVI:

```{r}
#Prep data:
Bells_p_hp <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1")
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0")

shapiro.test(Bells_Hp_pos$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$analysis_elev
# W = 0.90867, p-value = 0.2352
# PASSED - NORMAL; USE T-TEST

shapiro.test(Bells_Hp_neg$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$analysis_elev
# W = 0.64036, p-value = 0.0002845
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$analysis_elev) #in range, but not a lot of variation

# Wilcoxon Rank-Sum Test if data are not normal
BellsElev_wilcox.prev <- wilcox.test(analysis_elev ~ Haem_01, data = Bells_p_hp, exact = FALSE)
BellsElev_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_elev by Haem_01
# W = 30, p-value = 0.1483
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
BellsElev_wilcox.prev.p <-BellsElev_wilcox.prev$p.value

#Calculate effect size
BellsElev_effsize <- wilcox_effsize(Bells_p_hp, analysis_elev ~ Haem_01, alternative = "two.sided")
print(BellsElev_effsize)
# A tibble: 1 × 7
#   .y.           group1 group2 effsize    n1    n2 magnitude
# * <chr>         <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_elev 0      1        0.332     9    11 moderate 
BellsElev_effsize.s <- BellsElev_effsize$effsize

BellsElev_wilcox.prev.p
# [1] 0.148268
BellsElev_effsize.s
# Effect size (r) 
#         0.33177 
wilcoxonZ(Bells_Hp_pos$analysis_elev, Bells_Hp_neg$analysis_elev)
#     z 
# -1.48 
```

GRVI:

```{r}
#Prep data:
Gray_p_hp <- subset(df, df$common_name == "gray vireo")
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1")
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0") 

shapiro.test(Gray_Hp_pos$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos$analysis_elev
# W = 0.77931, p-value = 7.388e-12
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg$analysis_elev
# W = 0.8903, p-value = 0.0001164
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$analysis_elev) #not normally distributed, fat left tail

# Wilcoxon Rank-Sum Test if data are not normal
GrayElev_wilcox.prev <- wilcox.test(analysis_elev ~ Haem_01, data = Gray_p_hp, exact = FALSE)
GrayElev_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_elev by Haem_01
# W = 2540.5, p-value = 0.03814
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
GrayElev_wilcox.prev.p <- GrayElev_wilcox.prev$p.value

#Calculate effect size
GrayElev_effsize <- wilcox_effsize(Gray_p_hp, analysis_elev ~ Haem_01, alternative = "two.sided")
print(GrayElev_effsize)
# # A tibble: 1 × 7
#   .y.           group1 group2 effsize    n1    n2 magnitude
# * <chr>         <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_elev 0      1        0.159    55   115 small  
GrayElev_effsize.s <- GrayElev_effsize$effsize
GrayElev_wilcox.prev.p
# [1] 0.03814272
GrayElev_effsize.s
# Effect size (r) 
#       0.1591441
wilcoxonZ(Gray_Hp_pos$analysis_elev, Gray_Hp_neg$analysis_elev)
#     z 
# -2.07 
#----------------
#If we ran without 11 Utah samples:
Gray_p_hp1 <- filter(Gray_p_hp, Gray_p_hp$state != "Utah")
Gray_Hp_pos1 <- filter(Gray_p_hp1, Gray_p_hp1$Haem_01 == "1")
Gray_Hp_neg1 <- filter(Gray_p_hp1, Gray_p_hp1$Haem_01 == "0") 

shapiro.test(Gray_Hp_pos1$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos1$analysis_elev
# W = 0.95648, p-value = 0.001772
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg1$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg1$analysis_elev
# W = 0.8903, p-value = 0.0001164
# FAILED - NOT NORMAL; USE MW-U

GrayElev_wilcox.prev1 <- wilcox.test(analysis_elev ~ Haem_01, data = Gray_p_hp1, exact = FALSE)
GrayElev_wilcox.prev1
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_elev by Haem_01
# W = 2540.5, p-value = 0.2472
# alternative hypothesis: true location shift is not equal to 0
#NOT SIGNIFICANT

#Calculate effect size
GrayElev_effsize.prev1 <- wilcox_effsize(Gray_p_hp1, analysis_elev ~ Haem_01, alternative = "two.sided")
print(GrayElev_effsize.prev1)
# # A tibble: 1 × 7
#   .y.           group1 group2 effsize    n1    n2 magnitude
# * <chr>         <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_elev 0      1       0.0919    55   104 small  
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") 
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") 
#Without Embudo outlier
Plum_p_hp1 <- dplyr::filter(Plum_p_hp, Plum_p_hp$analysis_elev > 2000)
Plum_Hp_pos1 <- filter(Plum_p_hp1, Plum_p_hp1$Haem_01 == "1") 
Plum_Hp_neg1 <- filter(Plum_p_hp1, Plum_p_hp1$Haem_01 == "0") 

shapiro.test(Plum_Hp_pos$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$analysis_elev
# W = 0.88457, p-value = 0.0001787
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$analysis_elev)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$analysis_elev
# W = 0.64073, p-value = 0.0002875
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Plum_p_hp$analysis_elev) #close to normal distribution, could use Welch's t-test instead

PlumElev_wilcox.prev <- wilcox.test(analysis_elev ~ Haem_01, data = Plum_p_hp, exact = FALSE)
PlumElev_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  analysis_elev by Haem_01
# W = 206.5, p-value = 0.7718
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
PlumElev_wilcox.prev.p <-PlumElev_wilcox.prev$p.value

#Calculate effect size
PlumElev_effsize <- wilcox_effsize(Plum_p_hp, analysis_elev ~ Haem_01, alternative = "two.sided")
print(PlumElev_effsize)
# # A tibble: 1 × 7
#   .y.           group1 group2 effsize    n1    n2 magnitude
# * <chr>         <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 analysis_elev 0      1       0.0395     9    49 small 
PlumElev_effsize.s <- PlumElev_effsize$effsize

PlumElev_wilcox.prev.p
# [1] 0.7718394
PlumElev_effsize.s
# Effect size (r) 
#      0.03948506
wilcoxonZ(Plum_Hp_pos$analysis_elev, Plum_Hp_neg$analysis_elev)
#      z 
# -0.301 
```

# Visualization

Figure 1C: Elevation vs.Hp infection status by host species

```{r}
Hp_c <- c("#C5D8CF","#4F6D5A") 
str(df)
# Box Plot: BEVI infected/uninfected 
Hp_elev_prev_box <- ggplot(
  df, aes(x = Haem_01, y = analysis_elev, color = Haem_01, fill = Haem_01)) + 
  geom_boxplot(
    width = .15, fill = Hp_c,
    size = 0.8, outlier.shape = NA) +
  ggdist::stat_halfeye(
    adjust = .4,
    width = .3, 
    color = "black",
    position = position_nudge(x = 0.20)) +
  scale_x_discrete(expand = c(.07, .07)) +
  scale_color_manual(values=c("black", "black")) +
  scale_fill_manual(values = Hp_c, guide = "none") +
  labs(y="Elevation (m)", # Hella confusing formatting for x and y axis labels 
             x="All Vireo species") + # x="Infected/Uninfected"
        ggtitle("A") + # Assign panel number/header
        theme(plot.title.position = "plot", # parameter "plot" specifies that you want "title" flush with y-axis
          plot.title = element_text(face="bold")) + # This makes panel header bold 
        # This is good for labeling figure panels! Avoids having to manually toy w/ hjust and vjust
        # theme(plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm")) +  # top, right, bottom, left    
      #  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Keep if you want labels angled; else don't keep
        theme(legend.position = "blank") +
        theme(axis.text.y=element_text(size=10), axis.text.x=element_text(size=10), axis.title=element_text(size=12)) +
  # theme(panel.border = element_rect(colour = "black", fill=NA, linewidth = 1)) +
   theme(panel.background = element_rect(fill='transparent')) + #transparent panel bg
   theme(plot.background = element_rect(fill='transparent', color=NA),  #trt plot bg
   panel.grid.major = element_blank(), #remove major gridlines
   panel.grid.minor = element_blank(), #remove minor gridlines
   ) + 
  scale_y_continuous(limits=c(900,2500)) + 
  #theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
  facet_grid(cols = vars(Haem_01), scales = "free_x", space = "free_x") +
  theme(panel.spacing.x = unit(0, "cm"),strip.text.x = element_blank()) +
  theme(legend.position="none")
Hp_elev_prev_box
#------------------------------------------------
#BEVI

Bell_c <- c("#F3DA44", "#F9F0CA")
library(forcats)
Bells_p_hp$Haem_01 <- forcats::fct_relevel(Bells_p_hp$Haem_01, "1","0")

Bell_Elev_box <- ggplot(
  data = Bells_p_hp, mapping = aes(x =  Haem_01, y = analysis_elev , colour =  analysis_elev, na.rm = TRUE)) +
 # stat_boxplot(geom ='errorbar', width = 0.5, colour = "black") +
  geom_boxplot(outlier.color = "white", outlier.fill = "white", outlier.size = 2, fill= Bell_c, outlier.shape = 16) +
  scale_color_gradient(low = "#B57D00", high = "#B57D00") +
  geom_jitter(position = position_jitterdodge(), 
              shape = 16, stroke=0.5, size=1.5, show.legend = FALSE, fill="black", alpha = .5) +
  theme(panel.border = element_rect(colour = "black", fill=NA, linewidth = 1)) +
  theme(panel.background = element_rect(fill='transparent'), #transparent panel bg
  plot.background = element_rect(fill='transparent', color=NA), #trt plot bg
    panel.grid.major = element_blank(), #remove major gridlines
    panel.grid.minor = element_blank(), #remove minor gridlines
    panel.border = element_blank(),
    legend.background = element_blank(), #transparent legend bg
    legend.box.background = element_blank() #trt legend panel
    ) +
  theme(axis.line = element_line(color = 'black')) +
    scale_y_continuous(limits=c(1000,2600)) + 
    labs(y="Elevation (m)", # Hella confusing formatting for x and y axis labels 
             x="Bells Vireo") + # x="Infected/Uninfected"
        #ggtitle("A") + # Assign panel number/header
        theme(plot.title.position = "plot", # parameter "plot" specifies that you want "title" flush with y-axis
          plot.title = element_text(face="bold")) + # This makes panel header bold 
        # This is good for labeling figure panels! Avoids having to manually toy w/ hjust and vjust
        theme(plot.margin = unit(c(0.3,0.3,0.3,0.3), "cm")) +  # top, right, bottom, left    
       # theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Keep if you want labels angled; else don't keep
        theme(legend.position = "none") +
        theme(axis.text.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title=element_text(size=16)) +
  scale_x_discrete(labels=c('+', '-')) +
    #theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
  theme(legend.position="none") #+
   #coord_flip()
Bell_Elev_box

#----------------------------------------------------------
#GRVI
Gray_c <-c("#A0A0A0","#D8D8D6")
Gray_p_hp$Haem_01 <- forcats::fct_relevel(Gray_p_hp$Haem_01, "1","0")
Gray_Elev_box <- ggplot(
  data = Gray_p_hp, mapping = aes(x =  Haem_01, y = analysis_elev , colour =  analysis_elev, na.rm = TRUE)) +
 # stat_boxplot(geom ='errorbar', width = 0.5, colour = "black") +
  geom_boxplot(outlier.color = "white", outlier.fill = "white", outlier.size = 2, fill= Gray_c, outlier.shape = 16) +
  scale_color_gradient(low = "#3C3C3C", high = "#3C3C3C") +
  geom_jitter(position = position_jitterdodge(), 
              shape = 16, stroke=0.5, size=1.5, show.legend = FALSE, fill="black", alpha = .5) +
  theme(panel.border = element_rect(colour = "black", fill=NA, linewidth = 1)) +
  theme(panel.background = element_rect(fill='transparent'), #transparent panel bg
  plot.background = element_rect(fill='transparent', color=NA), #trt plot bg
    panel.grid.major = element_blank(), #remove major gridlines
    panel.grid.minor = element_blank(), #remove minor gridlines
    panel.border = element_blank(),
    legend.background = element_blank(), #transparent legend bg
    legend.box.background = element_blank() #trt legend panel
    ) +
  theme(axis.line = element_line(color = 'black')) +
  scale_y_continuous(limits=c(1000,2600)) + 
  theme(axis.title.y = element_blank()) +
    labs(#y="Elevation (m)", # Hella confusing formatting for x and y axis labels 
             x="Gray Vireo") + # x="Infected/Uninfected"
        #ggtitle("B") + # Assign panel number/header
        theme(plot.title.position = "plot", # parameter "plot" specifies that you want "title" flush with y-axis
          plot.title = element_text(face="bold")) + # This makes panel header bold 
        # This is good for labeling figure panels! Avoids having to manually toy w/ hjust and vjust
        theme(plot.margin = unit(c(0.3,0.3,0.3,0.3), "cm")) +  # top, right, bottom, left    
        #theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Keep if you want labels angled; else don't keep
        theme(legend.position = "none") +
        theme(axis.text.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title=element_text(size=16)) +
  scale_x_discrete(labels=c('+', '-')) +
    #theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
  theme(legend.position="none") +
    easy_remove_axes(
  which = "y",
  teach = FALSE
) #+
   #coord_flip()
Gray_Elev_box

#----------------------------------------------------------
#PLVI
Plum_c <-c("#89B8EB","#D7EDF9")
Plum_p_hp$Haem_01 <- forcats::fct_relevel(Plum_p_hp$Haem_01, "1","0")
Plum_Elev_box <- ggplot(
  data = Plum_p_hp, mapping = aes(x =  Haem_01, y = analysis_elev , colour =  analysis_elev, na.rm = TRUE)) +
 # stat_boxplot(geom ='errorbar', width = 0.5, colour = "black") +
  geom_boxplot(outlier.color = "white", outlier.fill = "white", outlier.size = 2, fill= Plum_c, outlier.shape = 16) +
  scale_color_gradient(low = "#1F4F8C", high = "#1F4F8C") +
  geom_jitter(position = position_jitterdodge(), 
              shape = 16, stroke=0.5, size=1.5, show.legend = FALSE, alpha = 0.5) +
  theme(panel.border = element_rect(colour = "black", fill=NA, linewidth = 1)) +
  theme(panel.background = element_rect(fill='transparent'), #transparent panel bg
  plot.background = element_rect(fill='transparent', color=NA), #trt plot bg
    panel.grid.major = element_blank(), #remove major gridlines
    panel.grid.minor = element_blank(), #remove minor gridlines
    panel.border = element_blank(),
    legend.background = element_blank(), #transparent legend bg
    legend.box.background = element_blank() #trt legend panel
    ) +
  theme(axis.line = element_line(color = 'black')) +
  scale_y_continuous(limits=c(1000,2600)) + 
  theme(axis.title.y = element_blank()) +
    labs(#y="Elevation (m)", # Hella confusing formatting for x and y axis labels 
             x="Plumbeous Vireo") + # x="Infected/Uninfected"
        #ggtitle("C") + # Assign panel number/header
        theme(plot.title.position = "plot", # parameter "plot" specifies that you want "title" flush with y-axis
          plot.title = element_text(face="bold")) + # This makes panel header bold 
        # This is good for labeling figure panels! Avoids having to manually toy w/ hjust and vjust
        theme(plot.margin = unit(c(0.3,0.3,0.3,0.3), "cm")) +  # top, right, bottom, left    
       # theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Keep if you want labels angled; else don't keep
        theme(legend.position = "none") +
        theme(axis.text.y=element_text(size=14), axis.text.x=element_text(size=14), axis.title=element_text(size=16)) +
  scale_x_discrete(labels=c('+', '-')) +
    #theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
  theme(legend.position="none") +
  easy_remove_axes(
  which = "y",
  teach = FALSE
)
Plum_Elev_box

# PLOT ALL PANELS TOGETHER 
library(patchwork)
# Alternative layout option = BETTER, USE THIS ONE:
Fig1_Boxplots_InfectedUninfected_elev <- (Bell_Elev_box + Gray_Elev_box + Plum_Elev_box +
                                            plot_layout(guides = "collect", nrow=1))
plot(Fig1_Boxplots_InfectedUninfected_elev)
 ggsave(Fig1_Boxplots_InfectedUninfected_elev, filename="Fig1C.pdf", bg="transparent", height=4.5, width=6, units="in")
```

# -----------------------------------------------

# tempPC1 v Status

## All vireos: Significant; MW-U (p-value = 0.003, r = 0.191)

## BEVI: Significant; MW-U (p-value = 0.027, r = 0.502)

## GRVI: NOT significant; MW-U (p-value = 0.196, r = 0.099)

## PLVI: NOT significant; MW-U (p-value = 0.396, r = 0.113)

```{r}
#Data prep:
df_p_pos <- filter(df, df$Haem_01 =="1") #248
df_p_neg <- filter(df, df$Haem_01 =="0") #73

shapiro.test(df$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  df$tempPC1
# W = 0.85338, p-value = 1.337e-14
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$tempPC1
# W = 0.77358, p-value = 2.994e-09
# FAILED - NOT NORMAL; USE MW-U

qqPlot(df$tempPC1)
#Discrete TPC1s, not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
HpTPC1_wilcox.prev <- wilcox.test(tempPC1 ~ Haem_01, data = df, exact = FALSE)
HpTPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC1 by Haem_01
# W = 4837.5, p-value = 0.002592
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpTPC1_wilcox.prev.p <-HpTPC1_wilcox.prev$p.value
#Calculate effect size
HpTPC1_effsize <- wilcox_effsize(df, tempPC1 ~ Haem_01, alternative = "two.sided")
print(HpTPC1_effsize)
# A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC1 0      1        0.177    73   175 small  
HpTPC1_effsize.s <- HpTPC1_effsize$effsize
HpTPC1_wilcox.prev.p
# [1] 0.002591938
HpTPC1_effsize.s
# Effect size (r) 
#       0.1913491
```

BEVI:

```{r}
Bells_p_hp   <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1")
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0")

shapiro.test(Bells_Hp_pos$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$tempPC1
# W = 0.84005, p-value = 0.03163
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Bells_Hp_neg$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$tempPC1
# W = 0.90189, p-value = 0.2632
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$tempPC1) #Very discrete levels, not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
BellsTPC1_wilcox.prev <- wilcox.test(tempPC1 ~ Haem_01, data = Bells_p_hp, exact = FALSE)
BellsTPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC1 by Haem_01
# W = 79, p-value = 0.02723
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
BellsTPC1_wilcox.prev.p <-BellsTPC1_wilcox.prev$p.value
BellsTPC1_wilcox.prev.p
#Calculate effect size
BellsTPC1_effsize <- wilcox_effsize(Bells_p_hp, tempPC1 ~ Haem_01, alternative = "two.sided")
print(BellsTPC1_effsize)
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC1 0      1        0.502     9    11 large  
BellsTPC1_effsize.s <- BellsTPC1_effsize$effsize
BellsTPC1_wilcox.prev.p
# [1] 0.02722863
BellsTPC1_effsize.s
# Effect size (r) 
#       0.5022873 
wilcoxonZ(Bells_Hp_pos$tempPC1, Bells_Hp_neg$tempPC1)
#     z 
# -2.25
```

GRVI:

```{r}
Gray_p_hp   <- subset(df, df$common_name == "gray vireo")
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1")
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0")

shapiro.test(Gray_Hp_pos$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos$tempPC1
# W = 0.93862, p-value = 5.022e-05
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg$tempPC1
# W = 0.92216, p-value = 0.001617
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$tempPC1) #Very discrete levels, not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
GrayTPC1_wilcox.prev <- wilcox.test(tempPC1 ~ Haem_01, data = Gray_p_hp, exact = FALSE)
GrayTPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC1 by Haem_01
# W = 2775, p-value = 0.1961
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
GrayTPC1_wilcox.prev.p <-GrayTPC1_wilcox.prev$p.value
#Calculate effect size
GrayTPC1_effsize <- wilcox_effsize(Gray_p_hp, tempPC1 ~ Haem_01, alternative = "two.sided")
print(GrayTPC1_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC1 0      1       0.0993    55   115 small   
GrayTPC1_effsize.s <- GrayTPC1_effsize$effsize
GrayTPC1_wilcox.prev.p
# [1] 0.196072
GrayTPC1_effsize.s
# Effect size (r) 
#      0.09928316 
wilcoxonZ(Gray_Hp_pos$tempPC1, Gray_Hp_neg$tempPC1)
#    z 
# 1.29
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") 
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") 

shapiro.test(Plum_Hp_pos$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$tempPC1
# W = 0.66972, p-value = 3.145e-09
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$tempPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$tempPC1
# W = 0.87875, p-value = 0.1523
# PASSED - NORMAL; COULD USE T-TEST

qqPlot(Plum_p_hp$tempPC1) #Very discrete levels, not normal distribution

# Wilcoxon Rank-Sum Test if data are not normal
PlumTPC1_wilcox.prev <- wilcox.test(tempPC1 ~ Haem_01, data = Plum_p_hp, exact = FALSE)
PlumTPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC1 by Haem_01
# W = 180.5, p-value = 0.3961
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
PlumTPC1_wilcox.prev.p <-PlumTPC1_wilcox.prev$p.value

#Calculate effect size
PlumTPC1_effsize <- wilcox_effsize(Plum_p_hp, tempPC1 ~ Haem_01, alternative = "two.sided")
print(PlumTPC1_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC1 0      1        0.113     9    49 small 
PlumTPC1_effsize.s <- PlumTPC1_effsize$effsize
PlumTPC1_wilcox.prev.p
# [1] 0.3960605
PlumTPC1_effsize.s
# Effect size (r) 
#       0.1128475 
wilcoxonZ(Plum_Hp_pos$tempPC1, Plum_Hp_neg$tempPC1)
#     z 
# 0.859 
```

# Visualization

Color-palette

```{r}
#Visualize dataset
#Set colors for pathogen comparisons
Hp_c <- c("#C5D8CF", "#4F6D5A")
BEVI_c <- c("#F9F0CA","#F3DA44")
GRVI_c <-c("#D8D8D6","#A0A0A0")
PLVI_c <-c("#D7EDF9","#89B8EB")
```

Species-specific box plots

```{r}
custom_fill_colors <- c(
  "Bell's vireo.0" = BEVI_c[1],
  "Bell's vireo.1" = BEVI_c[2],
  "gray vireo.0"   = GRVI_c[1],
  "gray vireo.1"   = GRVI_c[2],
  "plumbeous vireo.0" = PLVI_c[1],
  "plumbeous vireo.1" = PLVI_c[2]
)

df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))  # Add this
species_tpc1_prev_facet <- ggplot(
  df, aes(x = Haem_01, y = tempPC1, fill = interaction(common_name, Haem_01))) +
  geom_boxplot(
    width = 0.8,  # wider boxes
    size = 0.8,
    outlier.shape = NA,
    position = position_dodge(width = 3)) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
    ) +
  scale_fill_manual(values = custom_fill_colors, guide = "none") +
  scale_x_discrete(
    labels = c("pos", "neg")) +
  scale_y_continuous(limits = c(-6, 8)) +
  facet_wrap(~common_name, ncol = 3) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_blank(),
    strip.text = element_text(size = 13),
    strip.background = element_blank(),     # Removes gray strip box
    panel.spacing.x = unit(1, "lines"),     # Adjust inter-facet spacing
    panel.border = element_blank(),         # Removes facet boxes
    legend.position = "none") +
  labs(y = "tempPC1")
species_tpc1_prev_facet
```

Overall box plots:

```{r}
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))

overall_tpc1_prev_plot <- ggplot(
  df, aes(x = Haem_01, y = tempPC1, fill = Haem_01)) +
  geom_boxplot(
    width = 0.8,
    size = 0.8,
    outlier.shape = NA
  ) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
  ) +
  scale_fill_manual(values = c("0" = "#C5D8CF", "1" = "#4F6D5A"), guide = "none") +  # overall palette
  scale_x_discrete(
    labels = c("pos", "neg")
  ) +
  scale_y_continuous(limits = c(-6,8)) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.x = element_blank(),         # remove x-axis labels here
    axis.ticks.x = element_blank(),        # and tick marks
    panel.border = element_blank(),
    legend.position = "none") +
  labs(title = "Infection status across tempPC1")
overall_tpc1_prev_plot
```

Figure S3 - tempPC1 v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <- overall_tpc1_prev_plot / species_tpc1_prev_facet +
  plot_layout(heights = c(1, 1))
final_combined_plot

ggsave(final_combined_plot, filename="FigS3_box.pdf", bg="transparent", height=10, width=10, units="in")
```

# -----------------------------------------------

# tempPC2 v Status

## All vireos: NOT Significant; MW-U (p-value = 0.346, r = 0.060)

## BEVI: NOT Significant; MW-U (p-value = 0.110, r = 0.366)

## GRVI: NOT significant; MW-U (p-value = 0.210, r = 0.096)

## PLVI: NOT significant; MW-U (p-value = 0.307, r = 0.135)

```{r}
#Data prep:
df_p_pos <- filter(df, df$Haem_01 =="1") #248
df_p_neg <- filter(df, df$Haem_01 =="0") #73

shapiro.test(df$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  df$tempPC2
# W = 0.6332, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$tempPC2
# W = 0.77288, p-value = 2.875e-09
# FAILED - NOT NORMAL; USE MW-U

qqPlot(df$tempPC2)
# Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
HpTPC2_wilcox.prev <- wilcox.test(tempPC2 ~ Haem_01, data = df, exact = FALSE)
HpTPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC2 by Haem_01
# W = 5902.5, p-value = 0.3462
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpTPC2_wilcox.prev.p <-HpTPC2_wilcox.prev$p.value
#Calculate effect size
HpTPC2_effsize <- wilcox_effsize(df, tempPC2 ~ Haem_01, alternative = "two.sided")
print(HpTPC2_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC2 0      1       0.0599    73   175 small
HpTPC2_effsize.s <- HpTPC2_effsize$effsize
HpTPC2_wilcox.prev.p
# [1] 0.3462332
HpTPC2_effsize.s
# Effect size (r) 
#      0.05987375
```

BEVI:

```{r}
Bells_p_hp   <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1")
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0")

shapiro.test(Bells_Hp_pos$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$tempPC2
# W = 0.86828, p-value = 0.07367
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Bells_Hp_neg$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$tempPC2
# W = 0.69867, p-value = 0.001369
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$tempPC2) #Very discrete levels, not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
BellsTPC2_wilcox.prev <- wilcox.test(tempPC2 ~ Haem_01, data = Bells_p_hp, exact = FALSE)
BellsTPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC2 by Haem_01
# W = 71, p-value = 0.1098
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
BellsTPC2_wilcox.prev.p <-BellsTPC2_wilcox.prev$p.value

#Calculate effect size
BellsTPC2_effsize <- wilcox_effsize(Bells_p_hp, tempPC2 ~ Haem_01, alternative = "two.sided")
print(BellsTPC2_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC2 0      1        0.366     9    11 moderate  
BellsTPC2_effsize.s <- BellsTPC2_effsize$effsize
BellsTPC2_wilcox.prev.p
# [1] 0.1098075
BellsTPC2_effsize.s
# Effect size (r) 
#       0.3660738 
wilcoxonZ(Bells_Hp_pos$tempPC2, Bells_Hp_neg$tempPC2)
#     z 
# -1.64
```

GRVI:

```{r}
Gray_p_hp   <- subset(df, df$common_name == "gray vireo")
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1")
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0")

shapiro.test(Gray_Hp_pos$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos$tempPC2
# W = 0.46793, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg$tempPC2
# W = 0.92085, p-value = 0.001439
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$tempPC2) #Not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
GrayTPC2_wilcox.prev <- wilcox.test(tempPC2 ~ Haem_01, data = Gray_p_hp, exact = FALSE)
GrayTPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC2 by Haem_01
# W = 2787, p-value = 0.2103
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
GrayTPC2_wilcox.prev.p <-GrayTPC2_wilcox.prev$p.value
#Calculate effect size
GrayTPC2_effsize <- wilcox_effsize(Gray_p_hp, tempPC2 ~ Haem_01, alternative = "two.sided")
print(GrayTPC2_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC2 0      1       0.0962    55   115 small   
GrayTPC2_effsize.s <- GrayTPC2_effsize$effsize
GrayTPC2_wilcox.prev.p
# [1] 0.2103017
GrayTPC2_effsize.s
# Effect size (r) 
#      0.09620858 
wilcoxonZ(Gray_Hp_pos$tempPC2, Gray_Hp_neg$tempPC2)
#    z 
# 1.25
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") 
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") 

shapiro.test(Plum_Hp_pos$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$tempPC2
# W = 0.89726, p-value = 0.0004475
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$tempPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$tempPC2
# W = 0.66717, p-value = 0.0005864
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Plum_p_hp$tempPC2) #Not normal distribution

# Wilcoxon Rank-Sum Test if data are not normal
PlumTPC2_wilcox.prev <- wilcox.test(tempPC2 ~ Haem_01, data = Plum_p_hp, exact = FALSE)
PlumTPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  tempPC2 by Haem_01
# W = 172.5, p-value = 0.3075
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
PlumTPC2_wilcox.prev.p <-PlumTPC2_wilcox.prev$p.value

#Calculate effect size
PlumTPC2_effsize <- wilcox_effsize(Plum_p_hp, tempPC2 ~ Haem_01, alternative = "two.sided")
print(PlumTPC2_effsize)
# # A tibble: 1 × 7
#   .y.     group1 group2 effsize    n1    n2 magnitude
# * <chr>   <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 tempPC2 0      1        0.135     9    49 small
PlumTPC2_effsize.s <- PlumTPC2_effsize$effsize
PlumTPC2_wilcox.prev.p
# [1] 0.307462
PlumTPC2_effsize.s
# Effect size (r) 
#       0.135417 
wilcoxonZ(Plum_Hp_pos$tempPC2, Plum_Hp_neg$tempPC2)
#    z 
# 1.03 
```

# Visualization

Color-palette

```{r}
#Visualize dataset
#Set colors for pathogen comparisons
Hp_c <- c("#C5D8CF", "#4F6D5A")
BEVI_c <- c("#F9F0CA","#F3DA44")
GRVI_c <-c("#D8D8D6","#A0A0A0")
PLVI_c <-c("#D7EDF9","#89B8EB")
```

Species-specific box plots

```{r}
custom_fill_colors <- c(
  "Bell's vireo.0" = BEVI_c[1],
  "Bell's vireo.1" = BEVI_c[2],
  "gray vireo.0"   = GRVI_c[1],
  "gray vireo.1"   = GRVI_c[2],
  "plumbeous vireo.0" = PLVI_c[1],
  "plumbeous vireo.1" = PLVI_c[2]
)
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
species_tpc2_prev_facet <- ggplot(
  df, aes(x = Haem_01, y = tempPC2, fill = interaction(common_name, Haem_01))) +
  geom_boxplot(
    width = 0.8,  # wider boxes
    size = 0.8,
    outlier.shape = NA,
    position = position_dodge(width = 3)) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
    ) +
  scale_fill_manual(values = custom_fill_colors, guide = "none") +
  scale_x_discrete(
    labels = c("pos", "neg")) +
  scale_y_continuous(limits = c(-6, 8)) +
  facet_wrap(~common_name, ncol = 3) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_blank(),
    strip.text = element_text(size = 13),
    strip.background = element_blank(),     # Removes gray strip box
    panel.spacing.x = unit(1, "lines"),     # Adjust inter-facet spacing
    panel.border = element_blank(),         # Removes facet boxes
    legend.position = "none") +
  labs(y = "tempPC2")
species_tpc2_prev_facet
```

Overall box plots:

```{r}
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
overall_tpc2_prev_plot <- ggplot(
  df, aes(x = Haem_01, y = tempPC2, fill = Haem_01)) +
  geom_boxplot(
    width = 0.8,
    size = 0.8,
    outlier.shape = NA
  ) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
  ) +
  scale_fill_manual(values = c("0" = "#C5D8CF", "1" = "#4F6D5A"), guide = "none") +  # overall palette
  scale_x_discrete(
    labels = c("pos", "neg")
  ) +
  scale_y_continuous(limits = c(-6,8)) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.x = element_blank(),         # remove x-axis labels here
    axis.ticks.x = element_blank(),        # and tick marks
    panel.border = element_blank(),
    legend.position = "none") +
  labs(title = "Infection status across tempPC2")
overall_tpc2_prev_plot
```

Figure S4 - tempPC2 v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <- overall_tpc2_prev_plot / species_tpc2_prev_facet +
  plot_layout(heights = c(1, 1))
final_combined_plot

ggsave(final_combined_plot, filename="FigS4_box.pdf", bg="transparent", height=10, width=10, units="in")
```

# -----------------------------------------------

# precipPC1 v Status

## All vireos: Significant; MW-U (p-value = 0.018, r = 0.150)

## BEVI: NOT Significant; MW-U (p-value =0.093, r = 0.384)

## GRVI: NOT significant; MW-U (p-value = 0.587, r = 0.042)

## PLVI: NOT significant; MW-U (p-value = 0.339, r = 0.127)

```{r}
#Data prep:
df_p_pos <- filter(df, df$Haem_01 =="1") #248
df_p_neg <- filter(df, df$Haem_01 =="0") #73

shapiro.test(df$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  df$precipPC1
# W = 0.90884, p-value = 3.812e-11
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$precipPC1
# W = 0.84722, p-value = 3.531e-07
# FAILED - NOT NORMAL; USE MW-U

qqPlot(df$precipPC1)
# Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
HpPPC1_wilcox.prev <- wilcox.test(precipPC1 ~ Haem_01, data = df, exact = FALSE)
HpPPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC1 by Haem_01
# W = 5175, p-value = 0.01822
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpPPC1_wilcox.prev.p <-HpPPC1_wilcox.prev$p.value
#Calculate effect size
HpPPC1_effsize <- wilcox_effsize(df, precipPC1 ~ Haem_01, alternative = "two.sided")
print(HpPPC1_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC1 0      1        0.150    73   175 small  
HpPPC1_effsize.s <- HpPPC1_effsize$effsize
HpPPC1_wilcox.prev.p
# [1] 0.01821644
HpPPC1_effsize.s
# Effect size (r) 
#       0.1499975
```

BEVI:

```{r}
Bells_p_hp   <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1")
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0")

shapiro.test(Bells_Hp_pos$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$precipPC1
# W = 0.74464, p-value = 0.00177
# NFAILED - NOT NORMAL; USE MW-U

shapiro.test(Bells_Hp_neg$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$precipPC1
# W = 0.51972, p-value = 1.091e-05
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$precipPC1) #Very discrete levels, not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
BellsPPC1_wilcox.prev <- wilcox.test(precipPC1 ~ Haem_01, data = Bells_p_hp, exact = FALSE)
BellsPPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC1 by Haem_01
# W = 27, p-value = 0.0934
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
BellsPPC1_wilcox.prev.p <-BellsPPC1_wilcox.prev$p.value

#Calculate effect size
BellsPPC1_effsize <- wilcox_effsize(Bells_p_hp, precipPC1 ~ Haem_01, alternative = "two.sided")
print(BellsPPC1_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC1 0      1        0.384     9    11 moderate 
BellsPPC1_effsize.s <- BellsPPC1_effsize$effsize
BellsPPC1_wilcox.prev.p
# [1] 0.09339767
BellsPPC1_effsize.s
# Effect size (r) 
#       0.3836805 
wilcoxonZ(Bells_Hp_pos$precipPC1, Bells_Hp_neg$precipPC1)
#    z 
# 1.72
```

GRVI:

```{r}
Gray_p_hp   <- subset(df, df$common_name == "gray vireo")
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1")
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0")

shapiro.test(Gray_Hp_pos$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos$precipPC1
# W = 0.85009, p-value = 1.982e-09
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg$precipPC1
# W = 0.89509, p-value = 0.0001687
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$precipPC1) #Not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
GrayPPC1_wilcox.prev <- wilcox.test(precipPC1 ~ Haem_01, data = Gray_p_hp, exact = FALSE)
GrayPPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC1 by Haem_01
# W = 3324.5, p-value = 0.5871
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
GrayPPC1_wilcox.prev.p <-GrayPPC1_wilcox.prev$p.value
#Calculate effect size
GrayPPC1_effsize <- wilcox_effsize(Gray_p_hp, precipPC1 ~ Haem_01, alternative = "two.sided")
print(GrayPPC1_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC1 0      1       0.0418    55   115 small  
GrayPPC1_effsize.s <- GrayPPC1_effsize$effsize
GrayPPC1_wilcox.prev.p
# [1] 0.5870948
GrayPPC1_effsize.s
# Effect size (r) 
#      0.04177905  
wilcoxonZ(Gray_Hp_pos$precipPC1, Gray_Hp_neg$precipPC1)
#      z 
# -0.545
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") 
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") 

shapiro.test(Plum_Hp_pos$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$precipPC1
# W = 0.92642, p-value = 0.004521
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$precipPC1)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$precipPC1
# W = 0.89368, p-value = 0.2176
# PASSED  - NORMAL; COULD USE T-TEST

qqPlot(Plum_p_hp$precipPC1) #Not normal distribution

# Wilcoxon Rank-Sum Test if data are not normal
PlumPPC1_wilcox.prev <- wilcox.test(precipPC1 ~ Haem_01, data = Plum_p_hp, exact = FALSE)
PlumPPC1_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC1 by Haem_01
# W = 175.5, p-value = 0.339
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
PlumPPC1_wilcox.prev.p <-PlumPPC1_wilcox.prev$p.value

#Calculate effect size
PlumPPC1_effsize <- wilcox_effsize(Plum_p_hp, precipPC1 ~ Haem_01, alternative = "two.sided")
print(PlumPPC1_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC1 0      1        0.127     9    49 small
PlumPPC1_effsize.s <- PlumPPC1_effsize$effsize
PlumPPC1_wilcox.prev.p
# [1] 0.3389966
PlumPPC1_effsize.s
# Effect size (r) 
#       0.1269593 
wilcoxonZ(Plum_Hp_pos$precipPC1, Plum_Hp_neg$precipPC1)
#     z 
# 0.967
```

# Visualization

Color-palette

```{r}
#Visualize dataset
#Set colors for pathogen comparisons
Hp_c <- c("#C5D8CF", "#4F6D5A")
BEVI_c <- c("#F9F0CA","#F3DA44")
GRVI_c <-c("#D8D8D6","#A0A0A0")
PLVI_c <-c("#D7EDF9","#89B8EB")
```

Species-specific box plots

```{r}
custom_fill_colors <- c(
  "Bell's vireo.0" = BEVI_c[1],
  "Bell's vireo.1" = BEVI_c[2],
  "gray vireo.0"   = GRVI_c[1],
  "gray vireo.1"   = GRVI_c[2],
  "plumbeous vireo.0" = PLVI_c[1],
  "plumbeous vireo.1" = PLVI_c[2]
)

df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
species_ppc1_prev_facet <- ggplot(
  df, aes(x = Haem_01, y = precipPC1, fill = interaction(common_name, Haem_01))) +
  geom_boxplot(
    width = 0.8,  # wider boxes
    size = 0.8,
    outlier.shape = NA,
    position = position_dodge(width = 3)) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
    ) +
  scale_fill_manual(values = custom_fill_colors, guide = "none") +
  scale_x_discrete(
    labels = c("pos", "neg")) +
  scale_y_continuous(limits = c(-6, 8)) +
  facet_wrap(~common_name, ncol = 3) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_blank(),
    strip.text = element_text(size = 13),
    strip.background = element_blank(),     # Removes gray strip box
    panel.spacing.x = unit(1, "lines"),     # Adjust inter-facet spacing
    panel.border = element_blank(),         # Removes facet boxes
    legend.position = "none") +
  labs(y = "precipPC1")
species_ppc1_prev_facet
```

Overall box plots:

```{r}
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
overall_ppc1_prev_plot <- ggplot(
  df, aes(x = Haem_01, y = precipPC1, fill = Haem_01)) +
  geom_boxplot(
    width = 0.8,
    size = 0.8,
    outlier.shape = NA
  ) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
  ) +
  scale_fill_manual(values = c("0" = "#C5D8CF", "1" = "#4F6D5A"), guide = "none") +  # overall palette
  scale_x_discrete(
    labels = c("pos", "neg")
  ) +
  scale_y_continuous(limits = c(-6,8)) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.x = element_blank(),         # remove x-axis labels here
    axis.ticks.x = element_blank(),        # and tick marks
    panel.border = element_blank(),
    legend.position = "none") +
  labs(title = "Infection status across precipPC1")
overall_ppc1_prev_plot
```

Figure S5 - precipPC1 v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <- overall_ppc1_prev_plot / species_ppc1_prev_facet +
  plot_layout(heights = c(1, 1))
final_combined_plot

ggsave(final_combined_plot, filename="FigS5_box.pdf", bg="transparent", height=10, width=10, units="in")
```

# -----------------------------------------------

# precipPC2 v Status

## All vireos: Significant; MW-U (p-value = 0.004, r = 0.179)

## BEVI: NOT Significant; MW-U (p-value = 0.401, r = 0.196)

## GRVI: NEAR Significant; MW-U (p-value = 0.057, r = 0.145)

## PLVI: Significant; MW-U (p-value = 0.042, r = 0.268 )

```{r}
#Data prep:
df_p_pos <- filter(df, df$Haem_01 =="1") #248
df_p_neg <- filter(df, df$Haem_01 =="0") #73

shapiro.test(df$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  df$precipPC2
# W = 0.68725, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(df_p_neg$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  df_p_neg$precipPC2
# W = 0.63798, p-value = 3.956e-12
# FAILED - NOT NORMAL; USE MW-U

qqPlot(df$precipPC2)
# Not normally distributed.

# Wilcoxon Rank-Sum Test if data are not normal
HpPPC2_wilcox.prev <- wilcox.test(precipPC2 ~ Haem_01, data = df, exact = FALSE)
HpPPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC2 by Haem_01
# W = 4939, p-value = 0.004788
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
HpPPC2_wilcox.prev.p <-HpPPC2_wilcox.prev$p.value
#Calculate effect size
HpPPC2_effsize <- wilcox_effsize(df, precipPC2 ~ Haem_01, alternative = "two.sided")
print(HpPPC2_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC2 0      1        0.179    73   175 small  
HpPPC2_effsize.s <- HpPPC2_effsize$effsize
HpPPC2_wilcox.prev.p
# [1] 0.004788038
HpPPC2_effsize.s
# Effect size (r) 
#       0.1791929
```

BEVI:

```{r}
Bells_p_hp   <- subset(df, df$common_name == "Bell's vireo")
Bells_Hp_pos <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "1")
Bells_Hp_neg <- filter(Bells_p_hp, Bells_p_hp$Haem_01 == "0")

shapiro.test(Bells_Hp_pos$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_pos$precipPC2
# W = 0.84093, p-value = 0.03248
# NFAILED - NOT NORMAL; USE MW-U

shapiro.test(Bells_Hp_neg$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Bells_Hp_neg$precipPC2
# W = 0.77008, p-value = 0.009256
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Bells_p_hp$precipPC2) #Very discrete levels, not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
BellsPPC2_wilcox.prev <- wilcox.test(precipPC2 ~ Haem_01, data = Bells_p_hp, exact = FALSE)
BellsPPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC2 by Haem_01
# W = 61, p-value = 0.4015
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
BellsPPC2_wilcox.prev.p <-BellsPPC2_wilcox.prev$p.value

#Calculate effect size
BellsPPC2_effsize <- wilcox_effsize(Bells_p_hp, precipPC2 ~ Haem_01, alternative = "two.sided")
print(BellsPPC2_effsize)
# A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC2 0      1        0.196     9    11 small 
BellsPPC2_effsize.s <- BellsPPC2_effsize$effsize
BellsPPC2_wilcox.prev.p
# [1] 0.401542
BellsPPC2_effsize.s
# Effect size (r) 
#       0.1961034 
wilcoxonZ(Bells_Hp_pos$precipPC2, Bells_Hp_neg$precipPC2)
#      z 
# -0.877 
```

GRVI:

```{r}
Gray_p_hp   <- subset(df, df$common_name == "gray vireo")
Gray_Hp_pos <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "1")
Gray_Hp_neg <- filter(Gray_p_hp, Gray_p_hp$Haem_01 == "0")

shapiro.test(Gray_Hp_pos$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_pos$precipPC2
# W = 0.39631, p-value < 2.2e-16
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Gray_Hp_neg$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Gray_Hp_neg$precipPC2
# W = 0.78741, p-value = 1.704e-07
# FAILED - NOT NORMAL; USE MW-U

qqPlot(Gray_p_hp$precipPC2) #Not normal distribution 

# Wilcoxon Rank-Sum Test if data are not normal
GrayPPC2_wilcox.prev <- wilcox.test(precipPC2 ~ Haem_01, data = Gray_p_hp, exact = FALSE)
GrayPPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC2 by Haem_01
# W = 2596.5, p-value = 0.05723
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
GrayPPC2_wilcox.prev.p <-GrayPPC2_wilcox.prev$p.value
#Calculate effect size
GrayPPC2_effsize <- wilcox_effsize(Gray_p_hp, precipPC2 ~ Haem_01, alternative = "two.sided")
print(GrayPPC2_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC2 0      1        0.146    55   115 small  
GrayPPC2_effsize.s <- GrayPPC2_effsize$effsize
GrayPPC2_wilcox.prev.p
# [1] 0.05723411
GrayPPC2_effsize.s
# Effect size (r) 
#      0.1459688 
wilcoxonZ(Gray_Hp_pos$precipPC2, Gray_Hp_neg$precipPC2)
#   z 
# 1.9
```

PLVI:

```{r}
#Prep data:
Plum_p_hp <- subset(df, df$common_name == "plumbeous vireo")
Plum_Hp_pos <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "1") 
Plum_Hp_neg <- filter(Plum_p_hp, Plum_p_hp$Haem_01 == "0") 

shapiro.test(Plum_Hp_pos$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_pos$precipPC2
# W = 0.86176, p-value = 3.849e-05
# FAILED - NOT NORMAL; USE MW-U

shapiro.test(Plum_Hp_neg$precipPC2)
# 	Shapiro-Wilk normality test
# 
# data:  Plum_Hp_neg$precipPC2
# W = 0.78186, p-value = 0.01265
# PASSED  - NORMAL; COULD USE T-TEST

qqPlot(Plum_p_hp$precipPC2) #Not normal distribution

# Wilcoxon Rank-Sum Test if data are not normal
PlumPPC2_wilcox.prev <- wilcox.test(precipPC2 ~ Haem_01, data = Plum_p_hp, exact = FALSE)
PlumPPC2_wilcox.prev
# 	Wilcoxon rank sum test with continuity correction
# 
# data:  precipPC2 by Haem_01
# W = 125.5, p-value = 0.04231
# alternative hypothesis: true location shift is not equal to 0

#save p-value for plots
PlumPPC2_wilcox.prev.p <-PlumPPC2_wilcox.prev$p.value

#Calculate effect size
PlumPPC2_effsize <- wilcox_effsize(Plum_p_hp, precipPC2 ~ Haem_01, alternative = "two.sided")
print(PlumPPC2_effsize)
# # A tibble: 1 × 7
#   .y.       group1 group2 effsize    n1    n2 magnitude
# * <chr>     <chr>  <chr>    <dbl> <int> <int> <ord>    
# 1 precipPC2 0      1        0.268     9    49 small 
PlumPPC2_effsize.s <- PlumPPC2_effsize$effsize
PlumPPC2_wilcox.prev.p
# [1] 0.04230827
PlumPPC2_effsize.s
# Effect size (r) 
#       0.2680251
wilcoxonZ(Plum_Hp_pos$precipPC2, Plum_Hp_neg$precipPC2)
#    z 
# 2.04
```

## Visualization

Color-palette

```{r}
#Visualize dataset
#Set colors for pathogen comparisons
Hp_c <- c("#C5D8CF", "#4F6D5A")
BEVI_c <- c("#F9F0CA","#F3DA44")
GRVI_c <-c("#D8D8D6","#A0A0A0")
PLVI_c <-c("#D7EDF9","#89B8EB")
```

Species-specific box plots

```{r}
custom_fill_colors <- c(
  "Bell's vireo.0" = BEVI_c[1],
  "Bell's vireo.1" = BEVI_c[2],
  "gray vireo.0"   = GRVI_c[1],
  "gray vireo.1"   = GRVI_c[2],
  "plumbeous vireo.0" = PLVI_c[1],
  "plumbeous vireo.1" = PLVI_c[2]
)

df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
species_ppc2_prev_facet <- ggplot(
  df, aes(x = Haem_01, y = precipPC2, fill = interaction(common_name, Haem_01))) +
  geom_boxplot(
    width = 0.8,  # wider boxes
    size = 0.8,
    outlier.shape = NA,
    position = position_dodge(width = 3)) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
    ) +
  scale_fill_manual(values = custom_fill_colors, guide = "none") +
  scale_x_discrete(
    labels = c("pos", "neg")) +
  scale_y_continuous(limits = c(-4, 8), breaks = c(-4, 0, 4, 8)) +
  facet_wrap(~common_name, ncol = 3) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.title.x = element_blank(),
    strip.text = element_text(size = 13),
    strip.background = element_blank(),     # Removes gray strip box
    panel.spacing.x = unit(1, "lines"),     # Adjust inter-facet spacing
    panel.border = element_blank(),         # Removes facet boxes
    legend.position = "none") +
  labs(y = "precipPC2")
species_ppc2_prev_facet
```

Overall box plots:

```{r}
df$Haem_01 <- factor(df$Haem_01, levels = c("1", "0"))
overall_ppc2_prev_plot <- ggplot(
  df, aes(x = Haem_01, y = precipPC2, fill = Haem_01)) +
  geom_boxplot(
    width = 0.8,
    size = 0.8,
    outlier.shape = NA
  ) +
  geom_jitter(
    width = 0.1,
    height = 0,
    size = 3,
    alpha = 0.6,
    shape = 21,
    stroke = 0.3,
    color = "black"
  ) +
  scale_fill_manual(values = c("0" = "#C5D8CF", "1" = "#4F6D5A"), guide = "none") +  # overall palette
  scale_x_discrete(
    labels = c("pos", "neg")
  ) +
  scale_y_continuous(limits = c(-4,6)) +
  theme_minimal(base_size = 14) +
  theme(
    panel.background = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA),
    panel.grid.major.y = element_line(color = "darkgray", size = 0.3, linetype = "dashed"),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.x = element_blank(),         # remove x-axis labels here
    axis.ticks.x = element_blank(),        # and tick marks
    panel.border = element_blank(),
    legend.position = "none") +
  labs(title = "Infection status across precipPC2")
overall_ppc2_prev_plot
```

Figure S6 - precipPC2 v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <- overall_ppc2_prev_plot / species_ppc2_prev_facet +
  plot_layout(heights = c(1, 1))
final_combined_plot

ggsave(final_combined_plot, filename="FigS6_box.pdf", bg="transparent", height=10, width=10, units="in")
```

Figure S2-6 - Environment v. infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <- species_lat_prev_facet / species_tpc1_prev_facet / species_tpc2_prev_facet / species_ppc1_prev_facet / species_ppc2_prev_facet +
  plot_layout(heights = c(1,1,1,1,1))
final_combined_plot
ggsave(final_combined_plot, filename="FigS2-6.pdf", bg="transparent", height=20, width=10, units="in")
```

Figure - Significant environment v infection status

```{r}
# PLOT ALL PANELS TOGETHER 
library(patchwork)
final_combined_plot <-  species_tpc2_prev_facet / species_ppc1_prev_facet +
  plot_layout(heights = c(1,1))
final_combined_plot
ggsave(final_combined_plot, filename="Fig4.1.pdf", bg="transparent", height=12, width=10, units="in")
```

# -----------------------------------------------

# Environmental variables - Fixed Effects Linear Regression

# -----------------------------------------------

# BEVI Model Selection (Infection probability ~ elevation + tempPC1 1 is best); but unreliable
The limited nature of our sampling makes the results of any linear test unreliable due to large standard errors and small statistical power. We go through the code below for BEVI samples recognizing this.

```{r}
set.seed(123)
BEVI_df <- subset(df, df$common_name == "Bell's vireo") #20

#Standard linear regression with parasitemia as our response and environmental variables as our predictors.
BEVI_model_df <- subset(BEVI_df, select = c("Haem_01",
                                  "analysis_lat",
                                  "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))

BEVI_model_df$Haem_01 <- as.numeric(as.character(BEVI_df$Haem_01))

# Fit the full model
BEVI_prev.full.fixed <- glm(Haem_01 ~ 
               analysis_lat + 
               analysis_elev + 
               tempPC1 + 
               tempPC2 + 
               precipPC1 + 
               precipPC2
             , data = BEVI_model_df
             , family = binomial
             , na.action=na.fail
             ) 

summary(BEVI_prev.full.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_lat + analysis_elev + tempPC1 + 
#     tempPC2 + precipPC1 + precipPC2, family = binomial, data = BEVI_model_df, 
#     na.action = na.fail)
# 
# Coefficients:
#                 Estimate Std. Error z value Pr(>|z|)
# (Intercept)   -1.645e+04  3.998e+06  -0.004    0.997
# analysis_lat   8.696e+02  1.330e+05   0.007    0.995
# analysis_elev -7.986e+00  9.761e+02  -0.008    0.993
# tempPC1       -6.059e+02  8.136e+04  -0.007    0.994
# tempPC2        8.448e+02  1.113e+05   0.008    0.994
# precipPC1      1.257e+03  1.546e+05   0.008    0.994
# precipPC2     -1.605e+02  6.783e+04  -0.002    0.998
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 2.7526e+01  on 19  degrees of freedom
# Residual deviance: 1.6714e-07  on 13  degrees of freedom
# AIC: 14
# 
# Number of Fisher Scoring iterations: 25
```

## Evaluating multicollinearity

```{r}
# Check multicollinearity
vif(BEVI_prev.full.fixed)
 # analysis_lat analysis_elev       tempPC1       tempPC2     precipPC1     precipPC2 
 #   1821.76473    1077.66803      70.63412    3543.92364    9762.37584     992.50375  
# Because of the small sample size, we see high correlation between every variable
cor(BEVI_model_df[, c("analysis_elev"
                 , "analysis_lat"
                 , "tempPC1"
                 , "tempPC2"
                 , "precipPC1"
                 , "precipPC2"
                 )], use = "complete.obs")

#               analysis_elev analysis_lat    tempPC1    tempPC2  precipPC1  precipPC2
# analysis_elev     1.0000000    0.4923788  0.8135349  0.2659004 -0.5068402  0.1783091
# analysis_lat      0.4923788    1.0000000  0.7487942  0.8845165 -0.9329774  0.8552378
# tempPC1           0.8135349    0.7487942  1.0000000  0.4279942 -0.7837283  0.3350063
# tempPC2           0.2659004    0.8845165  0.4279942  1.0000000 -0.8546104  0.9796082
# precipPC1        -0.5068402   -0.9329774 -0.7837283 -0.8546104  1.0000000 -0.7753166
# precipPC2         0.1783091    0.8552378  0.3350063  0.9796082 -0.7753166  1.0000000
# Look at distributions
p <- ggpairs(BEVI_prev.full.fixed,
       # mapping = aes(color = common_name),
        upper = list(continuous = wrap("cor", size = 3)),
        lower = list(continuous = wrap("smooth", alpha = 0.5, size = 0.3)),
        diag = list(continuous = wrap("densityDiag", alpha = 0.4))) +
  theme_bw()
#print(p)
```

We don't need latitude in this case, as it is a 1:1 for precipPC2 which is more insightful ecologically. Additionally, elevation in this group is captured by precipPC1 at almost a 1:1, but there are certain aspects of elevation that are physiologically important outside of elevations affect on temperature and precipitation, so we'll keep both.

```{r}
BEVI_model_df <- subset(BEVI_df, select = c("Haem_01",
                                  "rowID",
                                #  "analysis_lat",
                                  "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))


# Fit model #1 (without latitude)
BEVI_prev.full.fixed <- glm(Haem_01 ~ 
              # analysis_lat + 
               analysis_elev + 
               tempPC1 + 
               tempPC2 + 
               precipPC1 + 
               precipPC2
             , data = BEVI_model_df
             , family = binomial
             , na.action=na.fail
             ) 

# Warning message:
# glm.fit: fitted probabilities numerically 0 or 1 occurred 

summary(BEVI_prev.full.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = BEVI_model_df, na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)
# (Intercept)   1020.1091   800.3558   1.275    0.202
# analysis_elev   -0.5657     0.4331  -1.306    0.192
# tempPC1        -19.1218    15.4782  -1.235    0.217
# tempPC2         59.7947    39.9789   1.496    0.135
# precipPC1       93.5062    67.9593   1.376    0.169
# precipPC2       32.7439    33.3416   0.982    0.326
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 27.5256  on 19  degrees of freedom
# Residual deviance:  7.8218  on 14  degrees of freedom
# AIC: 19.822
# 
# Number of Fisher Scoring iterations: 14
```

## Model selection for global additive only model

```{r}
# Candidate models
# Univariate
mod_null          <- glm(Haem_01 ~ 1, data = BEVI_model_df, family = binomial)
mod_temp1         <- glm(Haem_01 ~ tempPC1, data = BEVI_model_df, family = binomial)
mod_precip1       <- glm(Haem_01 ~ precipPC1, data = BEVI_model_df, family = binomial)
mod_temp2         <- glm(Haem_01 ~ tempPC2, data = BEVI_model_df, family = binomial)
mod_precip2       <- glm(Haem_01 ~ precipPC2, data = BEVI_model_df, family = binomial)
mod_elev          <- glm(Haem_01 ~ analysis_elev, data = BEVI_model_df, family = binomial)

# Multivariate models
mod_temp1_precip1 <- glm(Haem_01 ~ tempPC1 + precipPC1, data = BEVI_model_df, family = binomial)
mod_temp1_precip2 <- glm(Haem_01 ~ tempPC1 + precipPC2, data = BEVI_model_df, family = binomial)
mod_temp1_elev    <- glm(Haem_01 ~ tempPC1 + analysis_elev, data = BEVI_model_df, family = binomial)

mod_temp2_precip1 <- glm(Haem_01 ~ tempPC2 + precipPC1, data = BEVI_model_df, family = binomial)
mod_temp2_precip2 <- glm(Haem_01 ~ tempPC2 + precipPC2, data = BEVI_model_df, family = binomial)
mod_temp2_elev    <- glm(Haem_01 ~ tempPC2 + analysis_elev, data = BEVI_model_df, family = binomial)

mod_precip1_elev  <- glm(Haem_01 ~ precipPC1 + analysis_elev, data = BEVI_model_df, family = binomial)
mod_precip2_elev  <- glm(Haem_01 ~ precipPC2 + analysis_elev, data = BEVI_model_df, family = binomial)

# Global model
full <- glm(Haem_01 ~ tempPC1 + tempPC2 + precipPC1 + precipPC2 + analysis_elev, data = BEVI_model_df, family = binomial)

# Calculate AICc
aicc_values <- sapply(list
                      (mod_null                     #1
                           , mod_temp1              #2 ****
                           , mod_precip1            #3 ***
                           , mod_temp2              #4
                           , mod_precip2            #5
                           , mod_elev               #6                          
                           , mod_temp1_precip1      #7 **
                           , mod_temp1_precip2      #8
                           , mod_temp2_precip1      #9 *****
                           , mod_temp2_precip2      #10
                           , mod_temp2_elev         #11
                           , mod_temp1_elev         #12  *
                           , mod_precip1_elev       #13
                           , mod_precip2_elev       #14
                           , full                   #15
                           ), AICc)

# Compare
tibble(aicc_values)
#    aicc_values
#          <dbl>
#  1        29.7
#  2        23.6 ****
#  3        24.7 ***
#  4        29.9
#  5        31.1
#  6        28.5
#  7        25.9 **
#  8        26.3
#  9        22.6 ***** 
# 10        27.6
# 11        29.6
# 12        25.9 *
# 13        26.5
# 14        30.4
# 15        26.3

# Null model is best

# Create a supplemental table with model outputs
library(AICcmodavg)
library(broom)

# Named list of models
model_list <- list(
  null = mod_null,
  tempPC1 = mod_temp1,
  precipPC1 = mod_precip1,
  tempPC2 = mod_temp2,
  precipPC2 = mod_precip2,
  elev = mod_elev,
  temp1_precip1 = mod_temp1_precip1,
  temp1_precip2 = mod_temp1_precip2,
  temp2_precip1 = mod_temp2_precip1,
  temp2_precip2 = mod_temp2_precip2,
  temp1_elev = mod_temp1_elev,
  temp2_elev = mod_temp2_elev,
  precip1_elev = mod_precip1_elev,
  precip2_elev = mod_precip2_elev,
  full = full
)

# Get AICc values and ΔAICc, weights
aic_table <- aictab(cand.set = model_list, modnames = names(model_list), sort = FALSE)
# View
print(aic_table)
#write.csv(aic_table, "Fixed_effects_models_prevalence_output_BEVI.csv")
```

## Top model assessment
```{r}
# Best model
summary(mod_temp2_precip1)
# Call:
# glm(formula = Haem_01 ~ tempPC2 + precipPC1, family = binomial, 
#     data = BEVI_model_df)
# 
# Coefficients:
#             Estimate Std. Error z value Pr(>|z|)  
# (Intercept)    9.370      4.733   1.980   0.0477 *
# tempPC2        4.169      2.378   1.753   0.0796 .
# precipPC1      3.770      1.875   2.011   0.0443 *
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 27.526  on 19  degrees of freedom
# Residual deviance: 15.136  on 17  degrees of freedom
# AIC: 21.136
# 
# Number of Fisher Scoring iterations: 6

library(tidyverse)
library(broom)
theme_set(theme_classic())

# Predict the probability (p) of infection positive
probabilities <- predict(mod_temp2_precip1, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
head(predicted.classes)

# Linearity
BEVI_top_model_df <-subset(BEVI_model_df, select = c(
                                  "tempPC2",
                                  "precipPC1"
                                  ))

# Bind the logit and tidying the data for plot
mydata <- BEVI_top_model_df %>%
  mutate(logit = log(probabilities/(1-probabilities))) %>%
  gather(key = "predictors", value = "predictor.value", -logit)

ggplot(mydata, aes(logit, predictor.value))+
  geom_point(size = 0.5, alpha = 0.5) +
  geom_smooth(method = "loess") + 
  theme_bw() + 
  facet_wrap(~predictors, scales = "free_y")
# Not linear due to small sample size.

# Influential points
plot(mod_temp2_precip1, which = 4, id.n = 3)
#Small sample size inflate importance of points.

# Extract model results
model.data <- augment(mod_temp2_precip1) %>% 
  mutate(index = 1:n()) 

#Look at top 3 potential outlier points
model.data %>% top_n(3, .cooksd)

# Plot standardized residuals
ggplot(model.data, aes(index, .std.resid)) + 
  geom_point(aes(color = Haem_01, alpha = .5)) + theme_bw()

```

## Model Summary and Goodness of Fit
```{r}
cv_data <- na.omit(BEVI_model_df[, c("Haem_01", "tempPC2", "precipPC1")])

BEVI_final_model <- glm(Haem_01 ~ tempPC2 + precipPC1
                        , data = BEVI_model_df
                        , family = binomial)

# Model summary
summary(BEVI_final_model)

# Check linearity of logit
cv_data$Haem_01 <- as.numeric(as.character(cv_data$Haem_01))
str(cv_data$Haem_01)

hoslem.test(cv_data$Haem_01, fitted(BEVI_final_model))
# 	Hosmer and Lemeshow goodness of fit (GOF) test
# 
# data:  cv_data$Haem_01, fitted(BEVI_final_model)
# X-squared = 11.536, df = 7, p-value = 0.1169
#   p = 0.1169, Not significant, No evidence that the model is a poor fit.

# Check for overdispersion
overdisp_fun <- function(model) {
  rdf <- df.residual(model)
  rp <- residuals(model, type = "pearson")
  Pearson.chisq <- sum(rp^2)
  prat <- Pearson.chisq / rdf
  pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
  c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
overdisp_fun(BEVI_final_model)
#      chisq      ratio        rdf          p 
# 15.7864031  0.9286119 17.0000000  0.5390244
# Ratio ~1 means no overdispersion.

# Diagnostics
library(separationplot) # visual diagnostic of binary model fit https://onlinelibrary.wiley.com/doi/epdf/10.1111/j.1540-5907.2011.00525.x
separationplot::separationplot(pred=BEVI_final_model$fitted.values, actual=BEVI_final_model$y, type="rect", line="TRUE", show.expected=TRUE,heading="Separation plot for full model")
# We can see the limitation of our data points from this plot very clearly
```

## Root Mean Squared Error (RMSE)
```{r}
# Compute RMSE manually
rmse <- sqrt(mean(residuals(BEVI_final_model)^2))
cat("RMSE:", rmse)
# RMSE: 0.8699398
```

## Visualization

```{r}
library(ggeffects)
preds <- ggpredict(BEVI_final_model, terms = c("tempPC2", "precipPC1"))
plot(preds)
# Very concerning large standard errors
```

## 10-Fold Cross Validation

```{r}
library(caret)
# Set up 10-fold CV
set.seed(123)
train_control <- trainControl(method = "cv", number = 10)
cv_data$Haem_01 <- as.factor(cv_data$Haem_01)
# Train the model using caret
model_cv <- train(Haem_01 ~ tempPC2 + precipPC1,
                  data = cv_data,
                  method = "glm",
                  family = binomial,
                  trControl = train_control)

# View cross-validated RMSE
model_cv$results
#   parameter Accuracy     Kappa AccuracySD   KappaSD
# 1      none     0.75 0.4444444  0.3535534 0.7264832
```

# -----------------------------------------------

# GRVI Model Selection (Infection probability ~ elevation + tempPC1 1 is best)
```{r}
GRVI_df <- subset(df, df$common_name == "gray vireo") #170

#Standard linear regression with parasitemia as our response and environmental variables as our predictors.
GRVI_model_df <- subset(GRVI_df, select = c("Haem_01",
                                  "common_name",
                                  "rowID",
                                  "analysis_lat",
                                  "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))

GRVI_model_df$Haem_01 <- as.numeric(as.character(GRVI_df$Haem_01))

# Fit the full model
GRVI_prev.full.fixed <- glm(Haem_01 ~ 
               analysis_lat + 
               analysis_elev + 
               tempPC1 + 
               tempPC2 + 
               precipPC1 + 
               precipPC2
             , data = GRVI_model_df
             , family = binomial
             , na.action=na.fail
             ) 

summary(GRVI_prev.full.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_lat + analysis_elev + tempPC1 + 
#     tempPC2 + precipPC1 + precipPC2, family = binomial, data = GRVI_model_df, 
#     na.action = na.fail)
# 
# Coefficients:
#                 Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   -485.97311  526.73342  -0.923   0.3562  
# analysis_lat    15.08627   15.32089   0.985   0.3248  
# analysis_elev   -0.01818    0.01034  -1.759   0.0786 .
# tempPC1          0.81721    4.00724   0.204   0.8384  
# tempPC2         -0.74803    2.79922  -0.267   0.7893  
# precipPC1       -0.49059    1.32370  -0.371   0.7109  
# precipPC2       -3.51603    2.44698  -1.437   0.1508  
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 214.03  on 169  degrees of freedom
# Residual deviance: 195.24  on 163  degrees of freedom
# AIC: 209.24
# 
# Number of Fisher Scoring iterations: 10
```

## Evaluating multicollienarity

```{r}
# Check multicollinearity
vif(GRVI_prev.full.fixed)
 # analysis_lat analysis_elev       tempPC1       tempPC2     precipPC1     precipPC2 
 #    21.677795      9.294904     91.694729     29.199854     22.605808      4.117388 

cor(GRVI_model_df[, c("analysis_elev"
                 , "analysis_lat"
                 , "tempPC1"
                 , "tempPC2"
                 , "precipPC1"
                 , "precipPC2"
                 )], use = "complete.obs")

#               analysis_elev analysis_lat      tempPC1    tempPC2  precipPC1  precipPC2
# analysis_elev   1.000000000   -0.8259554 -0.001375091 -0.9046086  0.9393897 -0.8514449
# analysis_lat   -0.825955392    1.0000000  0.515956393  0.9795608 -0.7061630  0.9969029
# tempPC1        -0.001375091    0.5159564  1.000000000  0.3423342  0.2173012  0.4747161
# tempPC2        -0.904608644    0.9795608  0.342334241  1.0000000 -0.8138195  0.9862514
# precipPC1       0.939389661   -0.7061630  0.217301164 -0.8138195  1.0000000 -0.7366872
# precipPC2      -0.851444896    0.9969029  0.474716114  0.9862514 -0.7366872  1.0000000

# Look at distributions
p <- ggpairs(GRVI_prev.full.fixed,
       # mapping = aes(color = common_name),
        upper = list(continuous = wrap("cor", size = 3)),
        lower = list(continuous = wrap("smooth", alpha = 0.5, size = 0.3)),
        diag = list(continuous = wrap("densityDiag", alpha = 0.4))) +
  theme_bw()
#print(p)
```

We don't need latitude in this case, as it is a 1:1 for precipPC2 which is more insightful ecologically. Additionally, elevation in this group is captured by precipPC1 at almost a 1:1, but there are certain aspects of elevation that are physiologically important outside of elevations affect on temperature and precipitation, so we'll keep both.

```{r}
GRVI_model_df <- subset(GRVI_df, select = c("Haem_01",
                                  "rowID",
                                #  "analysis_lat",
                                  "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))


# Fit model #1 (without latitude)
GRVI_prev.full.fixed <- glm(Haem_01 ~ 
              # analysis_lat + 
               analysis_elev + 
               tempPC1 + 
               tempPC2 + 
               precipPC1 + 
               precipPC2
             , data = GRVI_model_df
             , family = binomial
             , na.action=na.fail
             ) 

summary(GRVI_prev.full.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = GRVI_model_df, na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   32.923694  16.819495   1.957   0.0503 .
# analysis_elev -0.016446   0.009398  -1.750   0.0801 .
# tempPC1        4.138417   2.233552   1.853   0.0639 .
# tempPC2        1.118069   1.672734   0.668   0.5039  
# precipPC1     -0.977112   1.143681  -0.854   0.3929  
# precipPC2     -1.815451   1.813186  -1.001   0.3167  
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 214.03  on 169  degrees of freedom
# Residual deviance: 196.43  on 164  degrees of freedom
# AIC: 208.43
# 
# Number of Fisher Scoring iterations: 8
```

## Model selection for global additive only model

```{r}
# Run model dredging
options(na.action = "na.fail")  # Required by dredge
GRVI_dredge_results.fixed <- dredge(GRVI_prev.full.fixed, rank = "AICc", trace = TRUE)
# View top models
head(GRVI_dredge_results.fixed)
# Show top 5 models in dredge results
GRVI_top5.fixed <- head(GRVI_dredge_results.fixed, 5)
# Print basic table
print(GRVI_top5.fixed)
# Global model call: glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = GRVI_model_df, na.action = na.fail)
# ---
# Model selection table 
#    (Int)  anl_elv    pPC1    pPC2  tPC1    tPC2 df  logLik  AICc delta weight
# 10 33.65 -0.01733                 2.022          3 -98.890 203.9  0.00  0.419
# 12 30.12 -0.01522 -0.6223         2.719          4 -98.703 205.6  1.72  0.177
# 14 38.79 -0.02023         -0.6445 2.339          4 -98.706 205.7  1.73  0.177
# 26 34.60 -0.01794                 1.967 -0.1747  4 -98.876 206.0  2.07  0.149
# 16 35.04 -0.01805 -0.6918 -0.8616 3.123          5 -98.455 207.3  3.35  0.078
# Models ranked by AICc(x) 
GRVI_best_model.fixed <- get.models(GRVI_dredge_results.fixed, 1)[[1]]
summary(GRVI_best_model.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + 1, family = binomial, 
#     data = GRVI_model_df, na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   33.645678  13.138607   2.561   0.0104 *
# analysis_elev -0.017329   0.006911  -2.508   0.0122 *
# tempPC1        2.022396   0.864953   2.338   0.0194 *
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 214.03  on 169  degrees of freedom
# Residual deviance: 197.78  on 167  degrees of freedom
# AIC: 203.78
# 
# Number of Fisher Scoring iterations: 6
```

Haem_01 ~ analysis_elev + tempPC1

This model suggests that probability of infection increases with lower elevations and cooler temperatures. This, however seems somewhat suspicious since the 11 Utah samples fit this category. Let's attempt model selection without those samples just to be sure.

## Utah check
```{r}
GRVI_df_noUT <- subset(GRVI_df, GRVI_df$state != "Utah") #159

#Standard linear regression with parasitemia as our response and environmental variables as our predictors.
GRVI_model_df_noUT <- subset(GRVI_df_noUT, select = c("Haem_01",
                                  "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))

GRVI_model_df_noUT$Haem_01 <- as.numeric(as.character(GRVI_model_df_noUT$Haem_01))

# Fit the full model
GRVI_prev.full.fixed_noUT <- glm(Haem_01 ~ 
               analysis_elev + 
               tempPC1 + 
               tempPC2 + 
               precipPC1 + 
               precipPC2
             , data = GRVI_model_df_noUT
             , family = binomial
             , na.action=na.fail
             ) 

summary(GRVI_prev.full.fixed_noUT)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = GRVI_model_df_noUT, 
#     na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   32.953219  16.868794   1.954   0.0508 .
# analysis_elev -0.016467   0.009442  -1.744   0.0812 .
# tempPC1        4.130015   2.260306   1.827   0.0677 .
# tempPC2        1.110975   1.698700   0.654   0.5131  
# precipPC1     -0.973286   1.154342  -0.843   0.3991  
# precipPC2     -1.815558   1.813111  -1.001   0.3167  
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 205.07  on 158  degrees of freedom
# Residual deviance: 196.42  on 153  degrees of freedom
# AIC: 208.42
# 
# Number of Fisher Scoring iterations: 4

# Run model dredging
options(na.action = "na.fail")  # Required by dredge
GRVI_dredge_results.fixed_noUT <- dredge(GRVI_prev.full.fixed_noUT, rank = "AICc", trace = TRUE)
# View top models
head(GRVI_dredge_results.fixed_noUT)
# Show top 5 models in dredge results
GRVI_top5.fixed_noUT <- head(GRVI_dredge_results.fixed_noUT, 5)
# Print basic table
print(GRVI_top5.fixed_noUT)
# Global model call: glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = GRVI_model_df_noUT, 
#     na.action = na.fail)
# ---
# Model selection table 
#      (Int)  anl_elv    pPC1   pPC2  tPC1    tPC2 df   logLik  AICc delta weight
# 10 33.5400 -0.01727                2.016          3  -98.887 203.9  0.00  0.410
# 14 39.2500 -0.02059         -1.024 2.366          4  -98.619 205.5  1.57  0.187
# 12 30.1100 -0.01521 -0.6208        2.716          4  -98.703 205.7  1.74  0.172
# 26 34.6200 -0.01800                1.911 -0.2628  4  -98.865 206.0  2.06  0.146
# 1   0.6371                                        1 -102.536 207.1  3.17  0.084
# Models ranked by AICc(x) 
GRVI_best_model.fixed_noUT <- get.models(GRVI_dredge_results.fixed_noUT, 1)[[1]]
summary(GRVI_best_model.fixed_noUT)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + 1, family = binomial, 
#     data = GRVI_model_df_noUT, na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   33.535067  13.294760   2.522   0.0117 *
# analysis_elev -0.017271   0.006992  -2.470   0.0135 *
# tempPC1        2.015581   0.873893   2.306   0.0211 *
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 205.07  on 158  degrees of freedom
# Residual deviance: 197.77  on 156  degrees of freedom
# AIC: 203.77
# 
# Number of Fisher Scoring iterations: 4
```

Removing the Utah samples did not diminish the environmental association with infection probability enough to change the best model.

```{r}
# Make table of top five models
top5.tibble <- as_tibble(GRVI_top5.fixed)
# write.table(top5.tibble, file = "Top_five_fixed_effects_models_prevalence_output_GRVI.csv", sep = ",", row.names = FALSE)
```

## Top model assessment

```{r}
# Best model
summary(GRVI_best_model.fixed)
# Call:
# glm(formula = Haem_01 ~ analysis_elev + tempPC1 + 1, family = binomial, 
#     data = GRVI_model_df, na.action = na.fail)
# 
# Coefficients:
#                Estimate Std. Error z value Pr(>|z|)  
# (Intercept)   33.645678  13.138607   2.561   0.0104 *
# analysis_elev -0.017329   0.006911  -2.508   0.0122 *
# tempPC1        2.022396   0.864953   2.338   0.0194 *
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 214.03  on 169  degrees of freedom
# Residual deviance: 197.78  on 167  degrees of freedom
# AIC: 203.78
# 
# Number of Fisher Scoring iterations: 6

library(tidyverse)
library(broom)
theme_set(theme_classic())

# Predict the probability (p) of infection positive
probabilities <- predict(GRVI_best_model.fixed, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
head(predicted.classes)

# Linearity
GRVI_top_model_df <-subset(GRVI_model_df, select = c(
                                  "analysis_elev",
                                  "tempPC1"
                                  ))

# Bind the logit and tidying the data for plot
mydata <- GRVI_top_model_df %>%
  mutate(logit = log(probabilities/(1-probabilities))) %>%
  gather(key = "predictors", value = "predictor.value", -logit)

ggplot(mydata, aes(logit, predictor.value))+
  geom_point(size = 0.5, alpha = 0.5) +
  geom_smooth(method = "loess") + 
  theme_bw() + 
  facet_wrap(~predictors, scales = "free_y")
# Not strictly linear, but still useful.

# Influential points
plot(GRVI_best_model.fixed, which = 4, id.n = 3)
# Point 218 is extremely influential with an elevation of 1821 and tempPC1 of -1.82620980 (much lower in comparison). 

# Extract model results
model.data <- augment(GRVI_best_model.fixed) %>% 
  mutate(index = 1:n()) 

#Look at top 3 potential outlier points
model.data %>% top_n(3, .cooksd)

# Plot standardized residuals
ggplot(model.data, aes(index, .std.resid)) + 
  geom_point(aes(color = Haem_01, alpha = .5)) + theme_bw()

```

##  Model Summary & Goodness of Fit

```{r}
cv_data <- na.omit(GRVI_model_df[, c("Haem_01", "analysis_elev", "tempPC1")])

GRVI_final_model <- glm(Haem_01 ~ analysis_elev + tempPC1
                        , family = binomial
                        , data = cv_data)
# Model summary
summary(GRVI_final_model)
# Check linearity of logit
cv_data$Haem_01 <- as.numeric(as.character(cv_data$Haem_01))
hoslem.test(cv_data$Haem_01, fitted(GRVI_final_model))
# 	Hosmer and Lemeshow goodness of fit (GOF) test
# 
# data:  cv_data$Haem_01, fitted(GRVI_final_model)
# X-squared = 13.302, df = 8, p-value = 0.1019
#   p = 0.1019, Not significant, No evidence that the model is a poor fit.

# Check for overdispersion
overdisp_fun <- function(model) {
  rdf <- df.residual(model)
  rp <- residuals(model, type = "pearson")
  Pearson.chisq <- sum(rp^2)
  prat <- Pearson.chisq / rdf
  pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
  c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
overdisp_fun(GRVI_final_model)
#       chisq       ratio         rdf           p 
# 156.9882048   0.9400491 167.0000000   0.6993367 
# Ratio ~1 means no overdispersion. \

# Diagnostics
library(separationplot) # visual diagnostic of binary model fit https://onlinelibrary.wiley.com/doi/epdf/10.1111/j.1540-5907.2011.00525.x
separationplot::separationplot(pred=GRVI_final_model$fitted.values, actual=GRVI_final_model$y, type="rect", line="TRUE", show.expected=TRUE,heading="Separation plot for full model")
```

## Root Mean Squared Error (RMSE)
```{r}
# Compute RMSE manually
rmse <- sqrt(mean(residuals(GRVI_final_model)^2))
cat("RMSE:", rmse)
# RMSE: 1.078617
```

## Visualization

```{r}
library(ggeffects)
preds <- ggpredict(GRVI_final_model, terms = c("analysis_elev", "tempPC1"))
plot(preds)
```

## 10-Fold Cross Validation

```{r}
library(caret)
# Set up 10-fold CV
set.seed(123)
train_control <- trainControl(method = "cv", number = 10)

# Train the model using caret
model_cv <- train(Haem_01 ~ analysis_elev + tempPC1,
                  data = cv_data,
                  method = "glm",
                  family = binomial,
                  trControl = train_control)

# View cross-validated RMSE
model_cv$results

#   parameter  Accuracy     Kappa AccuracySD   KappaSD
# 1      none 0.6474673 -0.031988 0.04794575 0.1096258
```

# -----------------------------------------------

# PLVI  Model Selection (Null is best)
```{r}
PLVI_df <- subset(df, df$common_name == "plumbeous vireo") #58
#Standard linear regression with parasitemia as our response and environmental variables as our predictors.
PLVI_model_df <- subset(PLVI_df, select = c("Haem_01",
                                 "analysis_elev",
                                  "tempPC1",
                                  "tempPC2",
                                  "precipPC1",
                                  "precipPC2"
                                  ))

PLVI_model_df$Haem_01 <- as.numeric(as.character(PLVI_df$Haem_01))
PLVI_prev.full.fixed <- glm(Haem_01 ~ 
                              analysis_elev
                            + tempPC1
                            + tempPC2
                            + precipPC1
                            + precipPC2
                            , family = binomial
                            , data = PLVI_model_df)
summary(PLVI_prev.full.fixed)
```
## Evaluating Linear Model Assumptions

-   Linearity - no further transformation needed past the natural log (1+x).
-   Homoscedasticity - Some homoscedasticity where residuals are clustered tightly at mid-high values, and loosely at low.
-   Normality of residuals - Acceptable (a bit of a tail on the lower end values).
-   Influential observations - rowID 10 is somewhat influential, but not extreme.
-   Multicollinearity - *We expect our variables to be strongly correlated, so we can ignore this for now.*

```{r}
# Check multicollinearity
vif(PLVI_prev.full.fixed)
# analysis_elev       tempPC1       tempPC2     precipPC1     precipPC2 
#      1.880231      2.259503      5.351315      1.764328      5.668766 

cor(PLVI_model_df[, c("analysis_elev"
               #  , "analysis_lat"
                 , "tempPC1"
                 , "tempPC2"
                 , "precipPC1"
                 , "precipPC2"
                 )], use = "complete.obs")

#               analysis_elev     tempPC1     tempPC2  precipPC1  precipPC2
# analysis_elev     1.0000000  0.46203709 -0.45538670  0.3036090 -0.3480156
# tempPC1           0.4620371  1.00000000 -0.04061645  0.3867691  0.2461217
# tempPC2          -0.4553867 -0.04061645  1.00000000 -0.1031188  0.8323912
# precipPC1         0.3036090  0.38676911 -0.10311877  1.0000000  0.0338313
# precipPC2        -0.3480156  0.24612166  0.83239118  0.0338313  1.0000000

# Not as strongly collinear, though we still see elevation and temperature come out as high, as well as precipPC1 & precipPC2.

# Look at distributions
p <- ggpairs(PLVI_prev.full.fixed,
        upper = list(continuous = wrap("cor", size = 3)),
        lower = list(continuous = wrap("smooth", alpha = 0.5, size = 0.3)),
        diag = list(continuous = wrap("densityDiag", alpha = 0.4))) +
  theme_bw()
#print(p)
```

## Model Selection for global additive only model

```{r}
# Run model dredging
options(na.action = "na.fail")  # Required by dredge
PLVI_dredge_results.fixed <- dredge(PLVI_prev.full.fixed, rank = "AICc", trace = TRUE)
# View top models
head(PLVI_dredge_results.fixed)
# Show top 5 models in dredge results
PLVI_top5.fixed <- head(PLVI_dredge_results.fixed, 5)
# Print basic table
print(PLVI_top5.fixed)
# Global model call: glm(formula = Haem_01 ~ analysis_elev + tempPC1 + tempPC2 + precipPC1 + 
#     precipPC2, family = binomial, data = PLVI_model_df)
# ---
# Model selection table 
#     (Int)   pPC1   pPC2   tPC2 df  logLik AICc delta weight
# 1  1.6950                       1 -25.031 52.1  0.00  0.301
# 5  1.5820        0.2480         2 -24.163 52.5  0.41  0.246
# 3  1.0160 0.2180                2 -24.541 53.3  1.17  0.168
# 17 1.7570               0.1897  2 -24.603 53.4  1.29  0.158
# 7  0.9395 0.2067 0.2489         3 -23.709 53.9  1.73  0.127
# Models ranked by AICc(x) 

PLVI_best_model.fixed <- get.models(PLVI_dredge_results.fixed, 1)[[1]]
summary(PLVI_best_model.fixed)
# Call:
# glm(formula = Haem_01 ~ 1, family = binomial, data = PLVI_model_df)
# 
# Coefficients:
#             Estimate Std. Error z value Pr(>|z|)    
# (Intercept)   1.6946     0.3626   4.673 2.97e-06 ***
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# (Dispersion parameter for binomial family taken to be 1)
# 
#     Null deviance: 50.063  on 57  degrees of freedom
# Residual deviance: 50.063  on 57  degrees of freedom
# AIC: 52.063
# 
# Number of Fisher Scoring iterations: 3
#
```

Since null model is best, we don't need to go through model fit assessment.

```{r}
# Make table of top five models
top5.tibble <- as_tibble(PLVI_top5.fixed)
write.table(top5.tibble, file = "Top_five_fixed_effects_models_prevalence_output_PLVI.csv", sep = ",", row.names = FALSE)
```
